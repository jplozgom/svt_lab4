  0:	proc  - (:root:) creates proc  0 (:init:)
spin: PingPong.pml:0, warning, global, 'bit   pActiveBalls' variable is never used (other than in print stmnts)
Starting Referee with pid 1
  1:	proc  0 (:init::1) creates proc  1 (Referee)
  1:	proc  0 (:init::1) PingPong.pml:52 (state 1)	[(run Referee())]

  2:	proc  1 (Referee:1) PingPong.pml:30 (state -)	[values: 1!BALL]
  2:	proc  1 (Referee:1) PingPong.pml:30 (state 1)	[chRefToPs!BALL]
		queue 1 (chRefToPs): [BALL]

Starting Player with pid 2
  3:	proc  0 (:init::1) creates proc  2 (Player)
  3:	proc  0 (:init::1) PingPong.pml:53 (state 2)	[(run Player(1))]

hi I am player 1  4:	proc  2 (Player:1) PingPong.pml:35 (state 1)	[printf('hi I am player %d',playerNumber)]

Starting Player with pid 3
  5:	proc  0 (:init::1) creates proc  3 (Player)
  5:	proc  0 (:init::1) PingPong.pml:54 (state 3)	[(run Player(2))]

hi I am player 2  6:	proc  3 (Player:1) PingPong.pml:35 (state 1)	[printf('hi I am player %d',playerNumber)]

  7:	proc  3 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

  8:	proc  2 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

  9:	proc  3 (Player:1) PingPong.pml:39 (state -)	[values: 1?BALL]
  9:	proc  3 (Player:1) PingPong.pml:39 (state 2)	[chRefToPs?BALL]
		queue 1 (chRefToPs): 

receive ball from ref 10:	proc  3 (Player:1) PingPong.pml:40 (state 3)	[printf('receive ball from ref')]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 11:	proc  3 (Player:1) PingPong.pml:43 (state 6)	[((playerNumber==2))]

 12:	proc  3 (Player:1) PingPong.pml:43 (state -)	[values: 2!BALL]
 12:	proc  3 (Player:1) PingPong.pml:43 (state 7)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]

 13:	proc  3 (Player:1) PingPong.pml:45 (state 9)	[.(goto)]

 14:	proc  2 (Player:1) PingPong.pml:46 (state -)	[values: 2?BALL]
 14:	proc  2 (Player:1) PingPong.pml:46 (state 13)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 

send ball P1 -> P2 15:	proc  2 (Player:1) PingPong.pml:46 (state 14)	[printf('send ball P1 -> P2')]

 16:	proc  3 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

 17:	proc  2 (Player:1) PingPong.pml:46 (state -)	[values: 3!BALL]
 17:	proc  2 (Player:1) PingPong.pml:46 (state 15)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]

 18:	proc  2 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

 19:	proc  2 (Player:1) PingPong.pml:45 (state -)	[values: 3?BALL]
 19:	proc  2 (Player:1) PingPong.pml:45 (state 10)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 

send ball P2 -> P1 20:	proc  2 (Player:1) PingPong.pml:45 (state 11)	[printf('send ball P2 -> P1')]

 21:	proc  2 (Player:1) PingPong.pml:45 (state -)	[values: 2!BALL]
 21:	proc  2 (Player:1) PingPong.pml:45 (state 12)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]

 22:	proc  3 (Player:1) PingPong.pml:46 (state -)	[values: 2?BALL]
 22:	proc  3 (Player:1) PingPong.pml:46 (state 13)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 

send ball P1 -> P2 23:	proc  3 (Player:1) PingPong.pml:46 (state 14)	[printf('send ball P1 -> P2')]

 24:	proc  3 (Player:1) PingPong.pml:46 (state -)	[values: 3!BALL]
 24:	proc  3 (Player:1) PingPong.pml:46 (state 15)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]

 25:	proc  3 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

 26:	proc  3 (Player:1) PingPong.pml:45 (state -)	[values: 3?BALL]
 26:	proc  3 (Player:1) PingPong.pml:45 (state 10)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

send ball P2 -> P1 27:	proc  3 (Player:1) PingPong.pml:45 (state 11)	[printf('send ball P2 -> P1')]

 28:	proc  3 (Player:1) PingPong.pml:45 (state -)	[values: 2!BALL]
 28:	proc  3 (Player:1) PingPong.pml:45 (state 12)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]

 29:	proc  3 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

 30:	proc  3 (Player:1) PingPong.pml:46 (state -)	[values: 2?BALL]
 30:	proc  3 (Player:1) PingPong.pml:46 (state 13)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 

 31:	proc  2 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

send ball P1 -> P2 32:	proc  3 (Player:1) PingPong.pml:46 (state 14)	[printf('send ball P1 -> P2')]

 33:	proc  3 (Player:1) PingPong.pml:46 (state -)	[values: 3!BALL]
 33:	proc  3 (Player:1) PingPong.pml:46 (state 15)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 34:	proc  3 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

 35:	proc  3 (Player:1) PingPong.pml:45 (state -)	[values: 3?BALL]
 35:	proc  3 (Player:1) PingPong.pml:45 (state 10)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

send ball P2 -> P1 36:	proc  3 (Player:1) PingPong.pml:45 (state 11)	[printf('send ball P2 -> P1')]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 37:	proc  3 (Player:1) PingPong.pml:45 (state -)	[values: 2!BALL]
 37:	proc  3 (Player:1) PingPong.pml:45 (state 12)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]

 38:	proc  2 (Player:1) PingPong.pml:46 (state -)	[values: 2?BALL]
 38:	proc  2 (Player:1) PingPong.pml:46 (state 13)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 

 39:	proc  3 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

send ball P1 -> P2 40:	proc  2 (Player:1) PingPong.pml:46 (state 14)	[printf('send ball P1 -> P2')]

 41:	proc  2 (Player:1) PingPong.pml:46 (state -)	[values: 3!BALL]
 41:	proc  2 (Player:1) PingPong.pml:46 (state 15)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]

 42:	proc  3 (Player:1) PingPong.pml:45 (state -)	[values: 3?BALL]
 42:	proc  3 (Player:1) PingPong.pml:45 (state 10)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 

send ball P2 -> P1 43:	proc  3 (Player:1) PingPong.pml:45 (state 11)	[printf('send ball P2 -> P1')]

 44:	proc  2 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

 45:	proc  3 (Player:1) PingPong.pml:45 (state -)	[values: 2!BALL]
 45:	proc  3 (Player:1) PingPong.pml:45 (state 12)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]

 46:	proc  3 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

 47:	proc  2 (Player:1) PingPong.pml:46 (state -)	[values: 2?BALL]
 47:	proc  2 (Player:1) PingPong.pml:46 (state 13)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 

send ball P1 -> P2 48:	proc  2 (Player:1) PingPong.pml:46 (state 14)	[printf('send ball P1 -> P2')]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 49:	proc  2 (Player:1) PingPong.pml:46 (state -)	[values: 3!BALL]
 49:	proc  2 (Player:1) PingPong.pml:46 (state 15)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 50:	proc  3 (Player:1) PingPong.pml:45 (state -)	[values: 3?BALL]
 50:	proc  3 (Player:1) PingPong.pml:45 (state 10)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

send ball P2 -> P1 51:	proc  3 (Player:1) PingPong.pml:45 (state 11)	[printf('send ball P2 -> P1')]

 52:	proc  3 (Player:1) PingPong.pml:45 (state -)	[values: 2!BALL]
 52:	proc  3 (Player:1) PingPong.pml:45 (state 12)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]

 53:	proc  2 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

 54:	proc  2 (Player:1) PingPong.pml:46 (state -)	[values: 2?BALL]
 54:	proc  2 (Player:1) PingPong.pml:46 (state 13)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

send ball P1 -> P2 55:	proc  2 (Player:1) PingPong.pml:46 (state 14)	[printf('send ball P1 -> P2')]

 56:	proc  2 (Player:1) PingPong.pml:46 (state -)	[values: 3!BALL]
 56:	proc  2 (Player:1) PingPong.pml:46 (state 15)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]

 57:	proc  3 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

 58:	proc  3 (Player:1) PingPong.pml:45 (state -)	[values: 3?BALL]
 58:	proc  3 (Player:1) PingPong.pml:45 (state 10)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 

 59:	proc  2 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

send ball P2 -> P1 60:	proc  3 (Player:1) PingPong.pml:45 (state 11)	[printf('send ball P2 -> P1')]

 61:	proc  3 (Player:1) PingPong.pml:45 (state -)	[values: 2!BALL]
 61:	proc  3 (Player:1) PingPong.pml:45 (state 12)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]

 62:	proc  2 (Player:1) PingPong.pml:46 (state -)	[values: 2?BALL]
 62:	proc  2 (Player:1) PingPong.pml:46 (state 13)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 63:	proc  3 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]

send ball P1 -> P2 64:	proc  2 (Player:1) PingPong.pml:46 (state 14)	[printf('send ball P1 -> P2')]

 65:	proc  2 (Player:1) PingPong.pml:46 (state -)	[values: 3!BALL]
 65:	proc  2 (Player:1) PingPong.pml:46 (state 15)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 66:	proc  3 (Player:1) PingPong.pml:45 (state -)	[values: 3?BALL]
 66:	proc  3 (Player:1) PingPong.pml:45 (state 10)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 67:	proc  2 (Player:1) PingPong.pml:48 (state 17)	[.(goto)]
