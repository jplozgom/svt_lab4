  0:	proc  - (:root:) creates proc  0 (:init:)
spin: PingPong.pml:0, warning, global, 'int   pActiveBalls' variable is never used (other than in print stmnts)
Starting Referee with pid 1
  1:	proc  0 (:init::1) creates proc  1 (Referee)
  1:	proc  0 (:init::1) PingPong.pml:95 (state 1)	[(run Referee())]

Starting Player1 with pid 2
  2:	proc  0 (:init::1) creates proc  2 (Player1)
  2:	proc  0 (:init::1) PingPong.pml:96 (state 2)	[(run Player1())]

Starting Player2 with pid 3
  3:	proc  0 (:init::1) creates proc  3 (Player2)
  3:	proc  0 (:init::1) PingPong.pml:97 (state 3)	[(run Player2())]

hi I am player 1  4:	proc  2 (Player1:1) PingPong.pml:44 (state 1)	[printf('hi I am player 1')]

hi I am player 2  5:	proc  3 (Player2:1) PingPong.pml:71 (state 1)	[printf('hi I am player 2')]

  6:	proc  1 (Referee:1) PingPong.pml:34 (state -)	[values: 1!BALL]
  6:	proc  1 (Referee:1) PingPong.pml:34 (state 1)	[chRefToPs!BALL]
		queue 1 (chRefToPs): [BALL]

  7:	proc  2 (Player1:1) PingPong.pml:68 (state 16)	[.(goto)]

  8:	proc  2 (Player1:1) PingPong.pml:51 (state -)	[values: 1?BALL]
  8:	proc  2 (Player1:1) PingPong.pml:51 (state 2)	[chRefToPs?BALL]
		queue 1 (chRefToPs): 

  9:	proc  2 (Player1:1) PingPong.pml:52 (state 3)	[pActiveBalls[0] = 1]
		pActiveBalls[0] = 1
		pActiveBalls[1] = 0

P1 receives ball from ref 10:	proc  2 (Player1:1) PingPong.pml:53 (state 4)	[printf('P1 receives ball from ref')]

 11:	proc  3 (Player2:1) PingPong.pml:92 (state 15)	[.(goto)]

 12:	proc  2 (Player1:1) PingPong.pml:58 (state 9)	[.(goto)]

balls 1 
 13:	proc  2 (Player1:1) PingPong.pml:58 (state 10)	[printf('balls %d \\n',(((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1]))]
		queue 2 (chP1ToP2): 
		queue 3 (chP2ToP1): 

P1 receives from P2, send ball ... P1 -> P2 14:	proc  2 (Player1:1) PingPong.pml:60 (state 11)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

 15:	proc  2 (Player1:1) PingPong.pml:62 (state -)	[values: 2!BALL]
 15:	proc  2 (Player1:1) PingPong.pml:62 (state 12)	[chP1ToP2!BALL]
		queue 2 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
 16:	proc  2 (Player1:1) PingPong.pml:63 (state 13)	[pActiveBalls[0] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 17:	proc  3 (Player2:1) PingPong.pml:80 (state -)	[values: 2?BALL]
 17:	proc  3 (Player2:1) PingPong.pml:80 (state 5)	[chP1ToP2?BALL]
		queue 2 (chP1ToP2): 

 18:	proc  3 (Player2:1) PingPong.pml:81 (state 6)	[pActiveBalls[1] = 1]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 1

P2 receives ball from ref 19:	proc  3 (Player2:1) PingPong.pml:82 (state 7)	[printf('P2 receives ball from ref')]

 20:	proc  3 (Player2:1) PingPong.pml:86 (state 9)	[.(goto)]
		queue 3 (chP2ToP1): 
		queue 1 (chRefToPs): 

P2 receives from P1, send ball ... P2 -> P1 21:	proc  3 (Player2:1) PingPong.pml:86 (state 10)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 3 (chP2ToP1): 
		queue 1 (chRefToPs): 

 22:	proc  3 (Player2:1) PingPong.pml:88 (state -)	[values: 3!BALL]
 22:	proc  3 (Player2:1) PingPong.pml:88 (state 11)	[chP2ToP1!BALL]
		queue 3 (chP2ToP1): [BALL]
 23:	proc  3 (Player2:1) PingPong.pml:89 (state 12)	[pActiveBalls[1] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 24:	proc  2 (Player1:1) PingPong.pml:54 (state -)	[values: 3?BALL]
 24:	proc  2 (Player1:1) PingPong.pml:54 (state 5)	[chP2ToP1?BALL]
		queue 2 (chP1ToP2): 
		queue 3 (chP2ToP1): 
		queue 1 (chRefToPs): 

 25:	proc  2 (Player1:1) PingPong.pml:55 (state 6)	[pActiveBalls[0] = 1]
		pActiveBalls[0] = 1
		pActiveBalls[1] = 0

P1 receives from P2 26:	proc  2 (Player1:1) PingPong.pml:56 (state 7)	[printf('P1 receives from P2')]
		queue 2 (chP1ToP2): 
		queue 1 (chRefToPs): 

 27:	proc  2 (Player1:1) PingPong.pml:58 (state 9)	[.(goto)]

balls 1 
 28:	proc  2 (Player1:1) PingPong.pml:58 (state 10)	[printf('balls %d \\n',(((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1]))]

P1 receives from P2, send ball ... P1 -> P2 29:	proc  2 (Player1:1) PingPong.pml:60 (state 11)	[printf('P1 receives from P2, send ball ... P1 -> P2')]
		queue 2 (chP1ToP2): 
		queue 1 (chRefToPs): 

 30:	proc  2 (Player1:1) PingPong.pml:62 (state -)	[values: 2!BALL]
 30:	proc  2 (Player1:1) PingPong.pml:62 (state 12)	[chP1ToP2!BALL]
		queue 2 (chP1ToP2): [BALL]
 31:	proc  2 (Player1:1) PingPong.pml:63 (state 13)	[pActiveBalls[0] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 32:	proc  3 (Player2:1) PingPong.pml:80 (state -)	[values: 2?BALL]
 32:	proc  3 (Player2:1) PingPong.pml:80 (state 5)	[chP1ToP2?BALL]
		queue 2 (chP1ToP2): 
		queue 3 (chP2ToP1): 
		queue 1 (chRefToPs): 

 33:	proc  3 (Player2:1) PingPong.pml:81 (state 6)	[pActiveBalls[1] = 1]
		queue 3 (chP2ToP1): 
		queue 1 (chRefToPs): 
		pActiveBalls[0] = 0
		pActiveBalls[1] = 1

P2 receives ball from ref 34:	proc  3 (Player2:1) PingPong.pml:82 (state 7)	[printf('P2 receives ball from ref')]

 35:	proc  3 (Player2:1) PingPong.pml:86 (state 9)	[.(goto)]

P2 receives from P1, send ball ... P2 -> P1 36:	proc  3 (Player2:1) PingPong.pml:86 (state 10)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

 37:	proc  3 (Player2:1) PingPong.pml:88 (state -)	[values: 3!BALL]
 37:	proc  3 (Player2:1) PingPong.pml:88 (state 11)	[chP2ToP1!BALL]
		queue 3 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
 38:	proc  3 (Player2:1) PingPong.pml:89 (state 12)	[pActiveBalls[1] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 39:	proc  2 (Player1:1) PingPong.pml:54 (state -)	[values: 3?BALL]
 39:	proc  2 (Player1:1) PingPong.pml:54 (state 5)	[chP2ToP1?BALL]
		queue 3 (chP2ToP1): 

 40:	proc  2 (Player1:1) PingPong.pml:55 (state 6)	[pActiveBalls[0] = 1]
		pActiveBalls[0] = 1
		pActiveBalls[1] = 0

P1 receives from P2 41:	proc  2 (Player1:1) PingPong.pml:56 (state 7)	[printf('P1 receives from P2')]
		queue 2 (chP1ToP2): 
		queue 1 (chRefToPs): 

 42:	proc  2 (Player1:1) PingPong.pml:58 (state 9)	[.(goto)]

balls 1 
 43:	proc  2 (Player1:1) PingPong.pml:58 (state 10)	[printf('balls %d \\n',(((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1]))]

P1 receives from P2, send ball ... P1 -> P2 44:	proc  2 (Player1:1) PingPong.pml:60 (state 11)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

 45:	proc  2 (Player1:1) PingPong.pml:62 (state -)	[values: 2!BALL]
 45:	proc  2 (Player1:1) PingPong.pml:62 (state 12)	[chP1ToP2!BALL]
		queue 2 (chP1ToP2): [BALL]
 46:	proc  2 (Player1:1) PingPong.pml:63 (state 13)	[pActiveBalls[0] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 47:	proc  3 (Player2:1) PingPong.pml:80 (state -)	[values: 2?BALL]
 47:	proc  3 (Player2:1) PingPong.pml:80 (state 5)	[chP1ToP2?BALL]
		queue 2 (chP1ToP2): 
		queue 3 (chP2ToP1): 
		queue 1 (chRefToPs): 

 48:	proc  3 (Player2:1) PingPong.pml:81 (state 6)	[pActiveBalls[1] = 1]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 1

P2 receives ball from ref 49:	proc  3 (Player2:1) PingPong.pml:82 (state 7)	[printf('P2 receives ball from ref')]

 50:	proc  3 (Player2:1) PingPong.pml:86 (state 9)	[.(goto)]
		queue 3 (chP2ToP1): 
		queue 1 (chRefToPs): 

P2 receives from P1, send ball ... P2 -> P1 51:	proc  3 (Player2:1) PingPong.pml:86 (state 10)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 3 (chP2ToP1): 
		queue 1 (chRefToPs): 

 52:	proc  3 (Player2:1) PingPong.pml:88 (state -)	[values: 3!BALL]
 52:	proc  3 (Player2:1) PingPong.pml:88 (state 11)	[chP2ToP1!BALL]
		queue 3 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
 53:	proc  3 (Player2:1) PingPong.pml:89 (state 12)	[pActiveBalls[1] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 54:	proc  2 (Player1:1) PingPong.pml:54 (state -)	[values: 3?BALL]
