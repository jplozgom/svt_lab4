  0:	proc  - (:root:) creates proc  0 (:init:)
ltl singleBallForever: [] ((! (((((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1])==0))) || (<> (((((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1])==1))))
ltl initiallyNoBallsMustNotFailForCredit: (((((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1])==0)) && ([] (1))
ltl allBallsCannotBeConstantMustNotFailForCredit: (((! ([] (((((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1])==0)))) && (! ([] (((((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1])==1))))) && (! ([] (((((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1])==2))))) && ([] (1))
Starting Referee with pid 1
  1:	proc  0 (:init::1) creates proc  1 (Referee)
  1:	proc  0 (:init::1) PingPong.pml:91 (state 1)	[(run Referee())]

Starting Player1 with pid 2
  2:	proc  0 (:init::1) creates proc  2 (Player1)
  2:	proc  0 (:init::1) PingPong.pml:92 (state 2)	[(run Player1())]

Starting Player2 with pid 3
  3:	proc  0 (:init::1) creates proc  3 (Player2)
  3:	proc  0 (:init::1) PingPong.pml:93 (state 3)	[(run Player2())]

hi I am player 2  4:	proc  3 (Player2:1) PingPong.pml:67 (state 1)	[printf('hi I am player 2')]

hi I am player 1  5:	proc  2 (Player1:1) PingPong.pml:40 (state 1)	[printf('hi I am player 1')]

  6:	proc  2 (Player1:1) PingPong.pml:64 (state 18)	[.(goto)]

  7:	proc  3 (Player2:1) PingPong.pml:88 (state 17)	[.(goto)]

  8:	proc  1 (Referee:1) PingPong.pml:35 (state -)	[values: 1!BALL]
  8:	proc  1 (Referee:1) PingPong.pml:35 (state 1)	[chRefToPs!BALL]
		queue 1 (chRefToPs): [BALL]

  9:	proc  3 (Player2:1) PingPong.pml:73 (state -)	[values: 1?BALL]
  9:	proc  3 (Player2:1) PingPong.pml:73 (state 2)	[chRefToPs?BALL]
		queue 1 (chRefToPs): 
 10:	proc  3 (Player2:1) PingPong.pml:74 (state 3)	[pActiveBalls[1] = 1]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 1

P2 receives ball from ref 11:	proc  3 (Player2:1) PingPong.pml:75 (state 5)	[printf('P2 receives ball from ref')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 12:	proc  3 (Player2:1) PingPong.pml:82 (state 11)	[.(goto)]

P2 receives from P1, send ball ... P2 -> P1 13:	proc  3 (Player2:1) PingPong.pml:82 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

 14:	proc  3 (Player2:1) PingPong.pml:84 (state -)	[values: 2!BALL]
 14:	proc  3 (Player2:1) PingPong.pml:84 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
 15:	proc  3 (Player2:1) PingPong.pml:85 (state 14)	[pActiveBalls[1] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 16:	proc  2 (Player1:1) PingPong.pml:50 (state -)	[values: 2?BALL]
 16:	proc  2 (Player1:1) PingPong.pml:50 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
 17:	proc  2 (Player1:1) PingPong.pml:51 (state 7)	[pActiveBalls[0] = 1]
		pActiveBalls[0] = 1
		pActiveBalls[1] = 0

P1 receives from P2 18:	proc  2 (Player1:1) PingPong.pml:52 (state 9)	[printf('P1 receives from P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 19:	proc  2 (Player1:1) PingPong.pml:54 (state 11)	[.(goto)]

balls 1 
 20:	proc  2 (Player1:1) PingPong.pml:54 (state 12)	[printf('balls %d \\n',(((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1]))]

P1 receives from P2, send ball ... P1 -> P2 21:	proc  2 (Player1:1) PingPong.pml:56 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 22:	proc  2 (Player1:1) PingPong.pml:58 (state -)	[values: 3!BALL]
 22:	proc  2 (Player1:1) PingPong.pml:58 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
 23:	proc  2 (Player1:1) PingPong.pml:59 (state 15)	[pActiveBalls[0] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 24:	proc  3 (Player2:1) PingPong.pml:76 (state -)	[values: 3?BALL]
 24:	proc  3 (Player2:1) PingPong.pml:76 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 
 25:	proc  3 (Player2:1) PingPong.pml:77 (state 7)	[pActiveBalls[1] = 1]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 1

P2 receives ball from P1 26:	proc  3 (Player2:1) PingPong.pml:78 (state 9)	[printf('P2 receives ball from P1')]

 27:	proc  3 (Player2:1) PingPong.pml:82 (state 11)	[.(goto)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

P2 receives from P1, send ball ... P2 -> P1 28:	proc  3 (Player2:1) PingPong.pml:82 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 29:	proc  3 (Player2:1) PingPong.pml:84 (state -)	[values: 2!BALL]
 29:	proc  3 (Player2:1) PingPong.pml:84 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
 30:	proc  3 (Player2:1) PingPong.pml:85 (state 14)	[pActiveBalls[1] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 31:	proc  2 (Player1:1) PingPong.pml:50 (state -)	[values: 2?BALL]
 31:	proc  2 (Player1:1) PingPong.pml:50 (state 6)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 32:	proc  2 (Player1:1) PingPong.pml:51 (state 7)	[pActiveBalls[0] = 1]
		pActiveBalls[0] = 1
		pActiveBalls[1] = 0

P1 receives from P2 33:	proc  2 (Player1:1) PingPong.pml:52 (state 9)	[printf('P1 receives from P2')]

 34:	proc  2 (Player1:1) PingPong.pml:54 (state 11)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

balls 1 
 35:	proc  2 (Player1:1) PingPong.pml:54 (state 12)	[printf('balls %d \\n',(((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1]))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

P1 receives from P2, send ball ... P1 -> P2 36:	proc  2 (Player1:1) PingPong.pml:56 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

 37:	proc  2 (Player1:1) PingPong.pml:58 (state -)	[values: 3!BALL]
 37:	proc  2 (Player1:1) PingPong.pml:58 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
 38:	proc  2 (Player1:1) PingPong.pml:59 (state 15)	[pActiveBalls[0] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 39:	proc  3 (Player2:1) PingPong.pml:76 (state -)	[values: 3?BALL]
 39:	proc  3 (Player2:1) PingPong.pml:76 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 40:	proc  3 (Player2:1) PingPong.pml:77 (state 7)	[pActiveBalls[1] = 1]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 1

P2 receives ball from P1 41:	proc  3 (Player2:1) PingPong.pml:78 (state 9)	[printf('P2 receives ball from P1')]

 42:	proc  3 (Player2:1) PingPong.pml:82 (state 11)	[.(goto)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

P2 receives from P1, send ball ... P2 -> P1 43:	proc  3 (Player2:1) PingPong.pml:82 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 44:	proc  3 (Player2:1) PingPong.pml:84 (state -)	[values: 2!BALL]
 44:	proc  3 (Player2:1) PingPong.pml:84 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
 45:	proc  3 (Player2:1) PingPong.pml:85 (state 14)	[pActiveBalls[1] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 46:	proc  2 (Player1:1) PingPong.pml:50 (state -)	[values: 2?BALL]
 46:	proc  2 (Player1:1) PingPong.pml:50 (state 6)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 47:	proc  2 (Player1:1) PingPong.pml:51 (state 7)	[pActiveBalls[0] = 1]
		pActiveBalls[0] = 1
		pActiveBalls[1] = 0

P1 receives from P2 48:	proc  2 (Player1:1) PingPong.pml:52 (state 9)	[printf('P1 receives from P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 49:	proc  2 (Player1:1) PingPong.pml:54 (state 11)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

balls 1 
 50:	proc  2 (Player1:1) PingPong.pml:54 (state 12)	[printf('balls %d \\n',(((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1]))]

P1 receives from P2, send ball ... P1 -> P2 51:	proc  2 (Player1:1) PingPong.pml:56 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 52:	proc  2 (Player1:1) PingPong.pml:58 (state -)	[values: 3!BALL]
 52:	proc  2 (Player1:1) PingPong.pml:58 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
 53:	proc  2 (Player1:1) PingPong.pml:59 (state 15)	[pActiveBalls[0] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 54:	proc  3 (Player2:1) PingPong.pml:76 (state -)	[values: 3?BALL]
 54:	proc  3 (Player2:1) PingPong.pml:76 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
 55:	proc  3 (Player2:1) PingPong.pml:77 (state 7)	[pActiveBalls[1] = 1]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 1

P2 receives ball from P1 56:	proc  3 (Player2:1) PingPong.pml:78 (state 9)	[printf('P2 receives ball from P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 57:	proc  3 (Player2:1) PingPong.pml:82 (state 11)	[.(goto)]

P2 receives from P1, send ball ... P2 -> P1 58:	proc  3 (Player2:1) PingPong.pml:82 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 59:	proc  3 (Player2:1) PingPong.pml:84 (state -)	[values: 2!BALL]
 59:	proc  3 (Player2:1) PingPong.pml:84 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
 60:	proc  3 (Player2:1) PingPong.pml:85 (state 14)	[pActiveBalls[1] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 61:	proc  2 (Player1:1) PingPong.pml:50 (state -)	[values: 2?BALL]
 61:	proc  2 (Player1:1) PingPong.pml:50 (state 6)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 62:	proc  2 (Player1:1) PingPong.pml:51 (state 7)	[pActiveBalls[0] = 1]
		pActiveBalls[0] = 1
		pActiveBalls[1] = 0

P1 receives from P2 63:	proc  2 (Player1:1) PingPong.pml:52 (state 9)	[printf('P1 receives from P2')]

 64:	proc  2 (Player1:1) PingPong.pml:54 (state 11)	[.(goto)]

balls 1 
 65:	proc  2 (Player1:1) PingPong.pml:54 (state 12)	[printf('balls %d \\n',(((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1]))]

P1 receives from P2, send ball ... P1 -> P2 66:	proc  2 (Player1:1) PingPong.pml:56 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

 67:	proc  2 (Player1:1) PingPong.pml:58 (state -)	[values: 3!BALL]
 67:	proc  2 (Player1:1) PingPong.pml:58 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
 68:	proc  2 (Player1:1) PingPong.pml:59 (state 15)	[pActiveBalls[0] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 69:	proc  3 (Player2:1) PingPong.pml:76 (state -)	[values: 3?BALL]
 69:	proc  3 (Player2:1) PingPong.pml:76 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 70:	proc  3 (Player2:1) PingPong.pml:77 (state 7)	[pActiveBalls[1] = 1]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 1

P2 receives ball from P1 71:	proc  3 (Player2:1) PingPong.pml:78 (state 9)	[printf('P2 receives ball from P1')]

 72:	proc  3 (Player2:1) PingPong.pml:82 (state 11)	[.(goto)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

P2 receives from P1, send ball ... P2 -> P1 73:	proc  3 (Player2:1) PingPong.pml:82 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

 74:	proc  3 (Player2:1) PingPong.pml:84 (state -)	[values: 2!BALL]
 74:	proc  3 (Player2:1) PingPong.pml:84 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
 75:	proc  3 (Player2:1) PingPong.pml:85 (state 14)	[pActiveBalls[1] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 76:	proc  2 (Player1:1) PingPong.pml:50 (state -)	[values: 2?BALL]
 76:	proc  2 (Player1:1) PingPong.pml:50 (state 6)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 77:	proc  2 (Player1:1) PingPong.pml:51 (state 7)	[pActiveBalls[0] = 1]
		pActiveBalls[0] = 1
		pActiveBalls[1] = 0

P1 receives from P2 78:	proc  2 (Player1:1) PingPong.pml:52 (state 9)	[printf('P1 receives from P2')]

 79:	proc  2 (Player1:1) PingPong.pml:54 (state 11)	[.(goto)]

balls 1 
 80:	proc  2 (Player1:1) PingPong.pml:54 (state 12)	[printf('balls %d \\n',(((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1]))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

P1 receives from P2, send ball ... P1 -> P2 81:	proc  2 (Player1:1) PingPong.pml:56 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 82:	proc  2 (Player1:1) PingPong.pml:58 (state -)	[values: 3!BALL]
 82:	proc  2 (Player1:1) PingPong.pml:58 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
 83:	proc  2 (Player1:1) PingPong.pml:59 (state 15)	[pActiveBalls[0] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 84:	proc  3 (Player2:1) PingPong.pml:76 (state -)	[values: 3?BALL]
 84:	proc  3 (Player2:1) PingPong.pml:76 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
 85:	proc  3 (Player2:1) PingPong.pml:77 (state 7)	[pActiveBalls[1] = 1]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 1

P2 receives ball from P1 86:	proc  3 (Player2:1) PingPong.pml:78 (state 9)	[printf('P2 receives ball from P1')]

 87:	proc  3 (Player2:1) PingPong.pml:82 (state 11)	[.(goto)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

P2 receives from P1, send ball ... P2 -> P1 88:	proc  3 (Player2:1) PingPong.pml:82 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 89:	proc  3 (Player2:1) PingPong.pml:84 (state -)	[values: 2!BALL]
 89:	proc  3 (Player2:1) PingPong.pml:84 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
 90:	proc  3 (Player2:1) PingPong.pml:85 (state 14)	[pActiveBalls[1] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 91:	proc  2 (Player1:1) PingPong.pml:50 (state -)	[values: 2?BALL]
 91:	proc  2 (Player1:1) PingPong.pml:50 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
 92:	proc  2 (Player1:1) PingPong.pml:51 (state 7)	[pActiveBalls[0] = 1]
		pActiveBalls[0] = 1
		pActiveBalls[1] = 0

P1 receives from P2 93:	proc  2 (Player1:1) PingPong.pml:52 (state 9)	[printf('P1 receives from P2')]

 94:	proc  2 (Player1:1) PingPong.pml:54 (state 11)	[.(goto)]

balls 1 
 95:	proc  2 (Player1:1) PingPong.pml:54 (state 12)	[printf('balls %d \\n',(((len(chP1ToP2)+len(chP2ToP1))+pActiveBalls[0])+pActiveBalls[1]))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

P1 receives from P2, send ball ... P1 -> P2 96:	proc  2 (Player1:1) PingPong.pml:56 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

 97:	proc  2 (Player1:1) PingPong.pml:58 (state -)	[values: 3!BALL]
 97:	proc  2 (Player1:1) PingPong.pml:58 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
 98:	proc  2 (Player1:1) PingPong.pml:59 (state 15)	[pActiveBalls[0] = 0]
		pActiveBalls[0] = 0
		pActiveBalls[1] = 0

 99:	proc  3 (Player2:1) PingPong.pml:76 (state -)	[values: 3?BALL]
 99:	proc  3 (Player2:1) PingPong.pml:76 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
