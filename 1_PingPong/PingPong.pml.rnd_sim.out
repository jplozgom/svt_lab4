  0:	proc  - (:root:) creates proc  0 (:init:)
ltl singleBallForever: <> ([] ((((len(chP1ToP2)+len(chP2ToP1))+ballCount)==1)))
ltl initiallyNoBallsMustNotFailForCredit: ((((len(chP1ToP2)+len(chP2ToP1))+ballCount)==0)) && ([] (1))
ltl allBallsCannotBeConstantMustNotFailForCredit: (((! ([] ((((len(chP1ToP2)+len(chP2ToP1))+ballCount)==0)))) && (! ([] ((((len(chP1ToP2)+len(chP2ToP1))+ballCount)==1))))) && (! ([] ((((len(chP1ToP2)+len(chP2ToP1))+ballCount)==2))))) && ([] (1))
Starting Referee with pid 1
  1:	proc  0 (:init::1) creates proc  1 (Referee)
  1:	proc  0 (:init::1) PingPong.pml:99 (state 1)	[(run Referee())]

Starting Player1 with pid 2
  2:	proc  0 (:init::1) creates proc  2 (Player1)
  2:	proc  0 (:init::1) PingPong.pml:100 (state 2)	[(run Player1())]

Starting Player2 with pid 3
  3:	proc  0 (:init::1) creates proc  3 (Player2)
  3:	proc  0 (:init::1) PingPong.pml:101 (state 3)	[(run Player2())]

  4:	proc  1 (Referee:1) PingPong.pml:35 (state -)	[values: 1!BALL]
  4:	proc  1 (Referee:1) PingPong.pml:35 (state 1)	[chRefToPs!BALL]
		queue 1 (chRefToPs): [BALL]

hi I am player 1  5:	proc  2 (Player1:1) PingPong.pml:40 (state 1)	[printf('hi I am player 1')]

  6:	proc  2 (Player1:1) PingPong.pml:66 (state 18)	[.(goto)]

hi I am player 2  7:	proc  3 (Player2:1) PingPong.pml:69 (state 1)	[printf('hi I am player 2')]

  8:	proc  2 (Player1:1) PingPong.pml:47 (state -)	[values: 1?BALL]
  8:	proc  2 (Player1:1) PingPong.pml:47 (state 2)	[chRefToPs?BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
  9:	proc  2 (Player1:1) PingPong.pml:48 (state 3)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives ball from ref 10:	proc  2 (Player1:1) PingPong.pml:49 (state 4)	[printf('P1 receives ball from ref')]

 11:	proc  3 (Player2:1) PingPong.pml:92 (state 17)	[.(goto)]

balls 1 
 12:	proc  2 (Player1:1) PingPong.pml:56 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]
		queue 3 (chP1ToP2): 

P1 receives from P2, send ball ... P1 -> P2 13:	proc  2 (Player1:1) PingPong.pml:58 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 14:	proc  2 (Player1:1) PingPong.pml:60 (state -)	[values: 3!BALL]
 14:	proc  2 (Player1:1) PingPong.pml:60 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
 15:	proc  2 (Player1:1) PingPong.pml:61 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

 16:	proc  3 (Player2:1) PingPong.pml:79 (state -)	[values: 3?BALL]
 16:	proc  3 (Player2:1) PingPong.pml:79 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 
 17:	proc  3 (Player2:1) PingPong.pml:80 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1 18:	proc  3 (Player2:1) PingPong.pml:81 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1 19:	proc  3 (Player2:1) PingPong.pml:86 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 20:	proc  3 (Player2:1) PingPong.pml:88 (state -)	[values: 2!BALL]
 20:	proc  3 (Player2:1) PingPong.pml:88 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
 21:	proc  3 (Player2:1) PingPong.pml:89 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

 22:	proc  2 (Player1:1) PingPong.pml:51 (state -)	[values: 2?BALL]
 22:	proc  2 (Player1:1) PingPong.pml:51 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 23:	proc  2 (Player1:1) PingPong.pml:52 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2 24:	proc  2 (Player1:1) PingPong.pml:53 (state 8)	[printf('P1 receives from P2')]

balls 1 
 25:	proc  2 (Player1:1) PingPong.pml:56 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]

P1 receives from P2, send ball ... P1 -> P2 26:	proc  2 (Player1:1) PingPong.pml:58 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 27:	proc  2 (Player1:1) PingPong.pml:60 (state -)	[values: 3!BALL]
 27:	proc  2 (Player1:1) PingPong.pml:60 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
 28:	proc  2 (Player1:1) PingPong.pml:61 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

 29:	proc  3 (Player2:1) PingPong.pml:79 (state -)	[values: 3?BALL]
 29:	proc  3 (Player2:1) PingPong.pml:79 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
 30:	proc  3 (Player2:1) PingPong.pml:80 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1 31:	proc  3 (Player2:1) PingPong.pml:81 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1 32:	proc  3 (Player2:1) PingPong.pml:86 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 33:	proc  3 (Player2:1) PingPong.pml:88 (state -)	[values: 2!BALL]
 33:	proc  3 (Player2:1) PingPong.pml:88 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
 34:	proc  3 (Player2:1) PingPong.pml:89 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

 35:	proc  2 (Player1:1) PingPong.pml:51 (state -)	[values: 2?BALL]
 35:	proc  2 (Player1:1) PingPong.pml:51 (state 6)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 36:	proc  2 (Player1:1) PingPong.pml:52 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2 37:	proc  2 (Player1:1) PingPong.pml:53 (state 8)	[printf('P1 receives from P2')]

balls 1 
 38:	proc  2 (Player1:1) PingPong.pml:56 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]

P1 receives from P2, send ball ... P1 -> P2 39:	proc  2 (Player1:1) PingPong.pml:58 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

 40:	proc  2 (Player1:1) PingPong.pml:60 (state -)	[values: 3!BALL]
 40:	proc  2 (Player1:1) PingPong.pml:60 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
 41:	proc  2 (Player1:1) PingPong.pml:61 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

 42:	proc  3 (Player2:1) PingPong.pml:79 (state -)	[values: 3?BALL]
 42:	proc  3 (Player2:1) PingPong.pml:79 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
 43:	proc  3 (Player2:1) PingPong.pml:80 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1 44:	proc  3 (Player2:1) PingPong.pml:81 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1 45:	proc  3 (Player2:1) PingPong.pml:86 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 46:	proc  3 (Player2:1) PingPong.pml:88 (state -)	[values: 2!BALL]
 46:	proc  3 (Player2:1) PingPong.pml:88 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
 47:	proc  3 (Player2:1) PingPong.pml:89 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

 48:	proc  2 (Player1:1) PingPong.pml:51 (state -)	[values: 2?BALL]
 48:	proc  2 (Player1:1) PingPong.pml:51 (state 6)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 49:	proc  2 (Player1:1) PingPong.pml:52 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2 50:	proc  2 (Player1:1) PingPong.pml:53 (state 8)	[printf('P1 receives from P2')]

balls 1 
 51:	proc  2 (Player1:1) PingPong.pml:56 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

P1 receives from P2, send ball ... P1 -> P2 52:	proc  2 (Player1:1) PingPong.pml:58 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

 53:	proc  2 (Player1:1) PingPong.pml:60 (state -)	[values: 3!BALL]
 53:	proc  2 (Player1:1) PingPong.pml:60 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
 54:	proc  2 (Player1:1) PingPong.pml:61 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

 55:	proc  3 (Player2:1) PingPong.pml:79 (state -)	[values: 3?BALL]
 55:	proc  3 (Player2:1) PingPong.pml:79 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 
 56:	proc  3 (Player2:1) PingPong.pml:80 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1 57:	proc  3 (Player2:1) PingPong.pml:81 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1 58:	proc  3 (Player2:1) PingPong.pml:86 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

 59:	proc  3 (Player2:1) PingPong.pml:88 (state -)	[values: 2!BALL]
 59:	proc  3 (Player2:1) PingPong.pml:88 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
 60:	proc  3 (Player2:1) PingPong.pml:89 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

 61:	proc  2 (Player1:1) PingPong.pml:51 (state -)	[values: 2?BALL]
 61:	proc  2 (Player1:1) PingPong.pml:51 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
 62:	proc  2 (Player1:1) PingPong.pml:52 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2 63:	proc  2 (Player1:1) PingPong.pml:53 (state 8)	[printf('P1 receives from P2')]

balls 1 
 64:	proc  2 (Player1:1) PingPong.pml:56 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

P1 receives from P2, send ball ... P1 -> P2 65:	proc  2 (Player1:1) PingPong.pml:58 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

 66:	proc  2 (Player1:1) PingPong.pml:60 (state -)	[values: 3!BALL]
 66:	proc  2 (Player1:1) PingPong.pml:60 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
 67:	proc  2 (Player1:1) PingPong.pml:61 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

 68:	proc  3 (Player2:1) PingPong.pml:79 (state -)	[values: 3?BALL]
 68:	proc  3 (Player2:1) PingPong.pml:79 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 69:	proc  3 (Player2:1) PingPong.pml:80 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1 70:	proc  3 (Player2:1) PingPong.pml:81 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1 71:	proc  3 (Player2:1) PingPong.pml:86 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

 72:	proc  3 (Player2:1) PingPong.pml:88 (state -)	[values: 2!BALL]
 72:	proc  3 (Player2:1) PingPong.pml:88 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
 73:	proc  3 (Player2:1) PingPong.pml:89 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

 74:	proc  2 (Player1:1) PingPong.pml:51 (state -)	[values: 2?BALL]
 74:	proc  2 (Player1:1) PingPong.pml:51 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
 75:	proc  2 (Player1:1) PingPong.pml:52 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2 76:	proc  2 (Player1:1) PingPong.pml:53 (state 8)	[printf('P1 receives from P2')]

balls 1 
 77:	proc  2 (Player1:1) PingPong.pml:56 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

P1 receives from P2, send ball ... P1 -> P2 78:	proc  2 (Player1:1) PingPong.pml:58 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

 79:	proc  2 (Player1:1) PingPong.pml:60 (state -)	[values: 3!BALL]
 79:	proc  2 (Player1:1) PingPong.pml:60 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
 80:	proc  2 (Player1:1) PingPong.pml:61 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

 81:	proc  3 (Player2:1) PingPong.pml:79 (state -)	[values: 3?BALL]
 81:	proc  3 (Player2:1) PingPong.pml:79 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 82:	proc  3 (Player2:1) PingPong.pml:80 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1 83:	proc  3 (Player2:1) PingPong.pml:81 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1 84:	proc  3 (Player2:1) PingPong.pml:86 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

 85:	proc  3 (Player2:1) PingPong.pml:88 (state -)	[values: 2!BALL]
 85:	proc  3 (Player2:1) PingPong.pml:88 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
 86:	proc  3 (Player2:1) PingPong.pml:89 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

 87:	proc  2 (Player1:1) PingPong.pml:51 (state -)	[values: 2?BALL]
 87:	proc  2 (Player1:1) PingPong.pml:51 (state 6)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 88:	proc  2 (Player1:1) PingPong.pml:52 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2 89:	proc  2 (Player1:1) PingPong.pml:53 (state 8)	[printf('P1 receives from P2')]

balls 1 
 90:	proc  2 (Player1:1) PingPong.pml:56 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

P1 receives from P2, send ball ... P1 -> P2 91:	proc  2 (Player1:1) PingPong.pml:58 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 92:	proc  2 (Player1:1) PingPong.pml:60 (state -)	[values: 3!BALL]
 92:	proc  2 (Player1:1) PingPong.pml:60 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
 93:	proc  2 (Player1:1) PingPong.pml:61 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

 94:	proc  3 (Player2:1) PingPong.pml:79 (state -)	[values: 3?BALL]
 94:	proc  3 (Player2:1) PingPong.pml:79 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 95:	proc  3 (Player2:1) PingPong.pml:80 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1 96:	proc  3 (Player2:1) PingPong.pml:81 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1 97:	proc  3 (Player2:1) PingPong.pml:86 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

 98:	proc  3 (Player2:1) PingPong.pml:88 (state -)	[values: 2!BALL]
 98:	proc  3 (Player2:1) PingPong.pml:88 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
 99:	proc  3 (Player2:1) PingPong.pml:89 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

100:	proc  2 (Player1:1) PingPong.pml:51 (state -)	[values: 2?BALL]
100:	proc  2 (Player1:1) PingPong.pml:51 (state 6)	[chP2ToP1?BALL]
