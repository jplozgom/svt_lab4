spin: BrokenPingPong.pml:35, redundant skip
spin: BrokenPingPong.pml:36, redundant skip
  0:	proc  - (:root:) creates proc  0 (:init:)
ltl alwaysAtMostOneBall: [] ((((len(chP1ToP2)+len(chP2ToP1))+ballCount)<=1))
ltl sanityCheckForAllBallsMustNotFailForCredit: (((! ([] ((((len(chP1ToP2)+len(chP2ToP1))+ballCount)==0)))) && (! ([] ((((len(chP1ToP2)+len(chP2ToP1))+ballCount)==1))))) && (! ([] ((((len(chP1ToP2)+len(chP2ToP1))+ballCount)==2))))) && ([] (1))
Starting Referee with pid 1
  1:	proc  0 (:init::1) creates proc  1 (Referee)
  1:	proc  0 (:init::1) BrokenPingPong.pml:110 (state 1)	[(run Referee())]

Starting Player1 with pid 2
  2:	proc  0 (:init::1) creates proc  2 (Player1)
  2:	proc  0 (:init::1) BrokenPingPong.pml:111 (state 2)	[(run Player1())]

Starting Player2 with pid 3
  3:	proc  0 (:init::1) creates proc  3 (Player2)
  3:	proc  0 (:init::1) BrokenPingPong.pml:112 (state 3)	[(run Player2())]

hi I am player 2  4:	proc  3 (Player2:1) BrokenPingPong.pml:82 (state 1)	[printf('hi I am player 2')]

  5:	proc  3 (Player2:1) BrokenPingPong.pml:105 (state 17)	[.(goto)]

  6:	proc  1 (Referee:1) BrokenPingPong.pml:31 (state -)	[values: 1!BALL]
  6:	proc  1 (Referee:1) BrokenPingPong.pml:31 (state 1)	[chRefToPs!BALL]
		queue 1 (chRefToPs): [BALL]

hi I am player 1  7:	proc  2 (Player1:1) BrokenPingPong.pml:53 (state 1)	[printf('hi I am player 1')]

  8:	proc  2 (Player1:1) BrokenPingPong.pml:79 (state 18)	[.(goto)]

  9:	proc  2 (Player1:1) BrokenPingPong.pml:60 (state -)	[values: 1?BALL]
  9:	proc  2 (Player1:1) BrokenPingPong.pml:60 (state 2)	[chRefToPs?BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 10:	proc  2 (Player1:1) BrokenPingPong.pml:61 (state 3)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives ball from ref 11:	proc  2 (Player1:1) BrokenPingPong.pml:62 (state 4)	[printf('P1 receives ball from ref')]

 12:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

 13:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]

balls 1 
 14:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]
		queue 3 (chP1ToP2): 

 15:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 16:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

P1 receives from P2, send ball ... P1 -> P2 17:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

 18:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

 19:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
 19:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
 20:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

 21:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
 21:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 
 22:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1 23:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1 24:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

 25:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
 25:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
 26:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

 27:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
 27:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
 28:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2 29:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

balls 1 
 30:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

P1 receives from P2, send ball ... P1 -> P2 31:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

 32:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 4)	[(1)]

 33:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 5)	[(1)]

 34:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 35:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

 36:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
 36:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
 37:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

 38:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
 38:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
 39:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1 40:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

 41:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 4)	[(1)]

 42:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 5)	[(1)]

 43:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

P2 receives from P1, send ball ... P2 -> P1 44:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 45:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
 45:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
 46:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

 47:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
 47:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 48:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2 49:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

 50:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

balls 1 
 51:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

P1 receives from P2, send ball ... P1 -> P2 52:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 53:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
 53:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
 54:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

 55:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 4)	[(1)]

 56:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 5)	[(1)]

 57:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

 58:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
 58:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
 59:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1 60:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1 61:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

 62:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
 62:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
 63:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

 64:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

 65:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
 65:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 66:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2 67:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

balls 1 
 68:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]

P1 receives from P2, send ball ... P1 -> P2 69:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

 70:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
 70:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
 71:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

 72:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
 72:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
 73:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1 74:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1 75:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

 76:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
 76:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
 77:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

 78:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
 78:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
 79:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2 80:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

 81:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 2 (chP2ToP1): 

 82:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 83:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

balls 1 
 84:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]

 85:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

P1 receives from P2, send ball ... P1 -> P2 86:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 87:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 88:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
 88:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
 89:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

 90:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
 90:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
 91:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1 92:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1 93:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

 94:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
 94:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
 95:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

 96:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

 97:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

 98:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
 98:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
 99:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2100:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

101:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

102:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

balls 1 
103:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]

P1 receives from P2, send ball ... P1 -> P2104:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

105:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]

106:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
106:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
107:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

108:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

109:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

110:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
110:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
111:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1112:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1113:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

114:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 2 (chP2ToP1): 

115:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
115:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
116:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

117:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
117:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
118:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2119:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

balls 1 
120:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

121:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

122:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

123:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

124:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]

P1 receives from P2, send ball ... P1 -> P2125:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

126:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]

127:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

128:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

129:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
129:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
130:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

131:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 2 (chP2ToP1): 

132:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

133:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
133:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
134:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1135:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

136:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

137:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

138:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 4)	[(1)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

P2 receives from P1, send ball ... P2 -> P1139:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

140:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
140:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
141:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

142:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
142:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
143:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2144:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

balls 1 
145:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

146:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 5)	[(1)]

147:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

148:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

149:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 

P1 receives from P2, send ball ... P1 -> P2150:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

151:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]

152:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
152:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
153:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

154:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
154:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
155:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1156:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

157:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

158:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

P2 receives from P1, send ball ... P2 -> P1159:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

160:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
160:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
161:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

162:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
162:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
163:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2164:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

165:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 

balls 1 
166:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]

167:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

168:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

P1 receives from P2, send ball ... P1 -> P2169:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

170:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

171:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 2 (chP2ToP1): 

172:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
172:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
173:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

174:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
174:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 
175:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1176:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

177:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]

178:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

P2 receives from P1, send ball ... P2 -> P1179:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

180:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
180:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
181:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

182:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

183:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]

184:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

185:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
185:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
186:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2187:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

188:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

balls 1 
189:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]

190:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

191:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 4)	[(1)]

P1 receives from P2, send ball ... P1 -> P2192:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

193:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
193:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
194:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

195:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
195:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
196:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1197:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1198:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

199:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
199:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
200:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

201:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 5)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

202:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

203:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

204:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
204:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
205:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2206:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

balls 1 
207:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]

208:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

P1 receives from P2, send ball ... P1 -> P2209:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

210:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]

211:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
211:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
212:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

213:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

214:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

215:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
215:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 
216:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1217:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

218:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 4)	[(1)]

P2 receives from P1, send ball ... P2 -> P1219:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

220:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 5)	[(1)]

221:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

222:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
222:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
223:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

224:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

225:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
225:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
226:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2227:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

228:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 4)	[(1)]

balls 1 
229:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]

P1 receives from P2, send ball ... P1 -> P2230:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

231:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 5)	[(1)]

232:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
232:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
233:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

234:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
234:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 
235:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P2 receives ball from P1236:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1237:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

238:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

239:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
239:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
240:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = 0

241:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
241:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
242:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 1
P1 receives from P2243:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

balls 1 
244:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]

P1 receives from P2, send ball ... P1 -> P2245:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

246:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

247:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

248:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

249:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
249:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
250:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = 0

251:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

252:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

253:	proc  1 (Referee:1) BrokenPingPong.pml:37 (state -)	[values: 3?BALL]
253:	proc  1 (Referee:1) BrokenPingPong.pml:37 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
254:	proc  1 (Referee:1) BrokenPingPong.pml:38 (state 7)	[ballCount = (ballCount-1)]
		ballCount = -1

255:	proc  1 (Referee:1) BrokenPingPong.pml:40 (state -)	[values: 1!BALL]
255:	proc  1 (Referee:1) BrokenPingPong.pml:40 (state 9)	[chRefToPs!BALL]
		queue 1 (chRefToPs): [BALL]

256:	proc  2 (Player1:1) BrokenPingPong.pml:60 (state -)	[values: 1?BALL]
256:	proc  2 (Player1:1) BrokenPingPong.pml:60 (state 2)	[chRefToPs?BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
257:	proc  2 (Player1:1) BrokenPingPong.pml:61 (state 3)	[ballCount = (ballCount+1)]
		ballCount = 0
P1 receives ball from ref258:	proc  2 (Player1:1) BrokenPingPong.pml:62 (state 4)	[printf('P1 receives ball from ref')]

259:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

260:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

balls 0 
261:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]

P1 receives from P2, send ball ... P1 -> P2262:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

263:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
263:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
264:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = -1

265:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 4)	[(1)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

266:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 5)	[(1)]

267:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

268:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
268:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
269:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 0
P2 receives ball from P1270:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

271:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

P2 receives from P1, send ball ... P2 -> P1272:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

273:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

274:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]

275:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
275:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
276:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = -1

277:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
277:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
278:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 0
P1 receives from P2279:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

balls 0 
280:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

281:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

282:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

P1 receives from P2, send ball ... P1 -> P2283:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

284:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 2 (chP2ToP1): 

285:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
285:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
286:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = -1

287:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

288:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
288:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
289:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 0
P2 receives ball from P1290:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

P2 receives from P1, send ball ... P2 -> P1291:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

292:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
292:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
293:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = -1

294:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state -)	[values: 2?BALL]
294:	proc  2 (Player1:1) BrokenPingPong.pml:64 (state 6)	[chP2ToP1?BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
295:	proc  2 (Player1:1) BrokenPingPong.pml:65 (state 7)	[ballCount = (ballCount+1)]
		ballCount = 0
P1 receives from P2296:	proc  2 (Player1:1) BrokenPingPong.pml:66 (state 8)	[printf('P1 receives from P2')]

balls 0 
297:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]

P1 receives from P2, send ball ... P1 -> P2298:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

299:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

300:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
300:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
301:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = -1

302:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

303:	proc  1 (Referee:1) BrokenPingPong.pml:37 (state -)	[values: 3?BALL]
303:	proc  1 (Referee:1) BrokenPingPong.pml:37 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
304:	proc  1 (Referee:1) BrokenPingPong.pml:38 (state 7)	[ballCount = (ballCount-1)]
		ballCount = -2

305:	proc  1 (Referee:1) BrokenPingPong.pml:40 (state -)	[values: 1!BALL]
305:	proc  1 (Referee:1) BrokenPingPong.pml:40 (state 9)	[chRefToPs!BALL]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): [BALL]

306:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

307:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

308:	proc  2 (Player1:1) BrokenPingPong.pml:60 (state -)	[values: 1?BALL]
308:	proc  2 (Player1:1) BrokenPingPong.pml:60 (state 2)	[chRefToPs?BALL]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
309:	proc  2 (Player1:1) BrokenPingPong.pml:61 (state 3)	[ballCount = (ballCount+1)]
		ballCount = -1
P1 receives ball from ref310:	proc  2 (Player1:1) BrokenPingPong.pml:62 (state 4)	[printf('P1 receives ball from ref')]

balls -1 
311:	proc  2 (Player1:1) BrokenPingPong.pml:69 (state 12)	[printf('balls %d \\n',((len(chP1ToP2)+len(chP2ToP1))+ballCount))]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

312:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

313:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

P1 receives from P2, send ball ... P1 -> P2314:	proc  2 (Player1:1) BrokenPingPong.pml:71 (state 13)	[printf('P1 receives from P2, send ball ... P1 -> P2')]

315:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state -)	[values: 3!BALL]
315:	proc  2 (Player1:1) BrokenPingPong.pml:73 (state 14)	[chP1ToP2!BALL]
		queue 3 (chP1ToP2): [BALL]
		queue 1 (chRefToPs): 
316:	proc  2 (Player1:1) BrokenPingPong.pml:74 (state 15)	[ballCount = (ballCount-1)]
		ballCount = -2

317:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]

318:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]

319:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 4)	[(1)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

320:	proc  1 (Referee:1) BrokenPingPong.pml:36 (state 5)	[(1)]

321:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state -)	[values: 3?BALL]
321:	proc  3 (Player2:1) BrokenPingPong.pml:92 (state 6)	[chP1ToP2?BALL]
		queue 3 (chP1ToP2): 
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 
322:	proc  3 (Player2:1) BrokenPingPong.pml:93 (state 7)	[ballCount = (ballCount+1)]
		ballCount = -1
P2 receives ball from P1323:	proc  3 (Player2:1) BrokenPingPong.pml:94 (state 8)	[printf('P2 receives ball from P1')]

324:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

325:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

326:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 2)	[(1)]
		queue 2 (chP2ToP1): 
		queue 1 (chRefToPs): 

P2 receives from P1, send ball ... P2 -> P1327:	proc  3 (Player2:1) BrokenPingPong.pml:99 (state 12)	[printf('P2 receives from P1, send ball ... P2 -> P1')]

328:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state -)	[values: 2!BALL]
328:	proc  3 (Player2:1) BrokenPingPong.pml:101 (state 13)	[chP2ToP1!BALL]
		queue 2 (chP2ToP1): [BALL]
		queue 1 (chRefToPs): 
329:	proc  3 (Player2:1) BrokenPingPong.pml:102 (state 14)	[ballCount = (ballCount-1)]
		ballCount = -2

330:	proc  1 (Referee:1) BrokenPingPong.pml:35 (state 3)	[(1)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

331:	proc  1 (Referee:1) BrokenPingPong.pml:46 (state 15)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 

332:	proc  1 (Referee:1) BrokenPingPong.pml:49 (state 17)	[.(goto)]
		queue 3 (chP1ToP2): 
		queue 1 (chRefToPs): 
