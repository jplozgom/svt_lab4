ltl allSeatsAlwaysAssigned: [] (<> ((crs:assignedSeats==3)))
ltl ifMoreClientsThanSeatsFlightFullCounterGreaterThanZero: [] ((! ((5>3))) || (<> ((crs:flightFullMessageCount==(5-3)))))
ltl notAvailableCountEqualsToNthTriangleNumber: <> ((crs:notAvailableSeatCount==(((3*(3+1))/2)-1)))
spin: Pessimistic.pml:0, warning, proctype crs, 'int   notAvailableSeatCount' variable is never used (other than in print stmnts)
spin: Pessimistic.pml:0, warning, proctype crs, 'int   flightFullMessageCount' variable is never used (other than in print stmnts)
spin: Pessimistic.pml:0, warning, proctype crs, 'int   assignedSeats' variable is never used (other than in print stmnts)
starting claim 6
MSC: ~G line 26
  1:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

Never claim moves to line 26	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]
Starting crs with pid 3
  2:	proc  1 (:init::1) Pessimistic.pml:136 (state 1)	[(run crs())]

  3:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

  4:	proc  2 (crs:1) Pessimistic.pml:57 (state 1)	[((i<3))]

  5:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

  6:	proc  1 (:init::1) Pessimistic.pml:138 (state 2)	[((idClient<(5-1)))]

  7:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

Starting client with pid 4
  8:	proc  1 (:init::1) Pessimistic.pml:139 (state 3)	[(run client(idClient))]

  9:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 10:	proc  1 (:init::1) Pessimistic.pml:140 (state 4)	[idClient = (idClient+1)]
		:init:(1):idClient = 1

 11:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 12:	proc  1 (:init::1) Pessimistic.pml:138 (state 2)	[((idClient<(5-1)))]

 13:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

Starting client with pid 5
 14:	proc  1 (:init::1) Pessimistic.pml:139 (state 3)	[(run client(idClient))]

 15:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 16:	proc  1 (:init::1) Pessimistic.pml:140 (state 4)	[idClient = (idClient+1)]
		:init:(1):idClient = 2

 17:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 18:	proc  1 (:init::1) Pessimistic.pml:138 (state 2)	[((idClient<(5-1)))]

 19:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

Starting client with pid 6
 20:	proc  1 (:init::1) Pessimistic.pml:139 (state 3)	[(run client(idClient))]

 21:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 22:	proc  1 (:init::1) Pessimistic.pml:140 (state 4)	[idClient = (idClient+1)]
		:init:(1):idClient = 3

 23:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 24:	proc  1 (:init::1) Pessimistic.pml:138 (state 2)	[((idClient<(5-1)))]

 25:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

Starting client with pid 7
 26:	proc  1 (:init::1) Pessimistic.pml:139 (state 3)	[(run client(idClient))]

 27:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 28:	proc  1 (:init::1) Pessimistic.pml:140 (state 4)	[idClient = (idClient+1)]
		:init:(1):idClient = 4

 29:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 30:	proc  6 (client:1) Pessimistic.pml:107 (state -)	[values: 1!GET_SEAT,0,3]
 30:	proc  6 (client:1) Pessimistic.pml:107 (state 1)	[clientToCrs!GET_SEAT,seatNumber,clientId]
		queue 1 (clientToCrs): [GET_SEAT,0,3]

 31:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 32:	proc  2 (crs:1) Pessimistic.pml:58 (state 2)	[seats[i].seatStatus = EMPTY]

 33:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 34:	proc  2 (crs:1) Pessimistic.pml:59 (state 3)	[seats[i].customerId = -(1)]

 35:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

status 3 36:	proc  2 (crs:1) Pessimistic.pml:60 (state 4)	[printf('status %d',seats[i].seatStatus)]

 37:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

customerId -1 38:	proc  2 (crs:1) Pessimistic.pml:61 (state 5)	[printf('customerId %d',seats[i].customerId)]

 39:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 40:	proc  2 (crs:1) Pessimistic.pml:62 (state 6)	[i = (i+1)]
		crs(2):i = 1

 41:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 42:	proc  2 (crs:1) Pessimistic.pml:57 (state 1)	[((i<3))]

 43:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 44:	proc  2 (crs:1) Pessimistic.pml:58 (state 2)	[seats[i].seatStatus = EMPTY]

 45:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 46:	proc  2 (crs:1) Pessimistic.pml:59 (state 3)	[seats[i].customerId = -(1)]

 47:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

status 3 48:	proc  2 (crs:1) Pessimistic.pml:60 (state 4)	[printf('status %d',seats[i].seatStatus)]

 49:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

customerId -1 50:	proc  2 (crs:1) Pessimistic.pml:61 (state 5)	[printf('customerId %d',seats[i].customerId)]

 51:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 52:	proc  2 (crs:1) Pessimistic.pml:62 (state 6)	[i = (i+1)]
		crs(2):i = 2

 53:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 54:	proc  2 (crs:1) Pessimistic.pml:57 (state 1)	[((i<3))]

 55:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 56:	proc  2 (crs:1) Pessimistic.pml:58 (state 2)	[seats[i].seatStatus = EMPTY]

 57:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 58:	proc  2 (crs:1) Pessimistic.pml:59 (state 3)	[seats[i].customerId = -(1)]

 59:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

status 3 60:	proc  2 (crs:1) Pessimistic.pml:60 (state 4)	[printf('status %d',seats[i].seatStatus)]

 61:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

customerId -1 62:	proc  2 (crs:1) Pessimistic.pml:61 (state 5)	[printf('customerId %d',seats[i].customerId)]

 63:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 64:	proc  2 (crs:1) Pessimistic.pml:62 (state 6)	[i = (i+1)]
		crs(2):i = 3

 65:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 66:	proc  2 (crs:1) Pessimistic.pml:63 (state 7)	[((i>=3))]

 67:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 68:	proc  2 (crs:1) Pessimistic.pml:67 (state -)	[values: 1?GET_SEAT,0,3]
 68:	proc  2 (crs:1) Pessimistic.pml:67 (state 12)	[clientToCrs?message,receivedSeat,receivedCustomerId]
		queue 1 (clientToCrs): 
		crs(2):message = GET_SEAT
		crs(2):receivedSeat = 0
		crs(2):receivedCustomerId = 3

 69:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

*******assigned seat 0, received seat 0, received client 3
 70:	proc  2 (crs:1) Pessimistic.pml:68 (state 13)	[printf('*******assigned seat %d, received seat %d, received client %d\\n',assignedSeats,receivedSeat,receivedCustomerId)]

 71:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 72:	proc  2 (crs:1) Pessimistic.pml:70 (state 14)	[((message==GET_SEAT))]

 73:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 74:	proc  5 (client:1) Pessimistic.pml:107 (state -)	[values: 1!GET_SEAT,0,2]
 74:	proc  5 (client:1) Pessimistic.pml:107 (state 1)	[clientToCrs!GET_SEAT,seatNumber,clientId]
		queue 1 (clientToCrs): [GET_SEAT,0,2]

 75:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 76:	proc  2 (crs:1) Pessimistic.pml:73 (state 19)	[(((receivedSeat<3)&&(seats[receivedSeat].seatStatus==EMPTY)))]

 76:	proc  2 (crs:1) Pessimistic.pml:74 (state 16)	[seats[receivedSeat].seatStatus = RESERVED]

 76:	proc  2 (crs:1) Pessimistic.pml:75 (state 17)	[seats[receivedSeat].customerId = receivedCustomerId]

 76:	proc  2 (crs:1) Pessimistic.pml:77 (state -)	[values: 5!RETURNING_SEAT,0,3]
 76:	proc  2 (crs:1) Pessimistic.pml:77 (state 18)	[crsToClient[receivedCustomerId]!RETURNING_SEAT,receivedSeat,receivedCustomerId]
		queue 2 (crsToClient[0]): 
		queue 3 (crsToClient[1]): 
		queue 4 (crsToClient[2]): 
		queue 5 (crsToClient[3]): [RETURNING_SEAT,0,3]
		queue 6 (crsToClient[4]): 

 77:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 78:	proc  6 (client:1) Pessimistic.pml:109 (state -)	[values: 5?RETURNING_SEAT,0,3]
 78:	proc  6 (client:1) Pessimistic.pml:109 (state 2)	[crsToClient[clientId]?RETURNING_SEAT,seatNumber,clientId]
		queue 5 (crsToClient[3]): 
		client(6):seatNumber = 0
		client(6):clientId = 3

 79:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 80:	proc  2 (crs:1) Pessimistic.pml:67 (state -)	[values: 1?GET_SEAT,0,2]
 80:	proc  2 (crs:1) Pessimistic.pml:67 (state 12)	[clientToCrs?message,receivedSeat,receivedCustomerId]
		queue 1 (clientToCrs): 
		crs(2):message = GET_SEAT
		crs(2):receivedSeat = 0
		crs(2):receivedCustomerId = 2

 81:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

*******assigned seat 0, received seat 0, received client 2
 82:	proc  2 (crs:1) Pessimistic.pml:68 (state 13)	[printf('*******assigned seat %d, received seat %d, received client %d\\n',assignedSeats,receivedSeat,receivedCustomerId)]

 83:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 84:	proc  2 (crs:1) Pessimistic.pml:70 (state 14)	[((message==GET_SEAT))]

 85:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 86:	proc  6 (client:1) Pessimistic.pml:111 (state -)	[values: 1!PAYMENT_SEAT,0,3]
 86:	proc  6 (client:1) Pessimistic.pml:111 (state 3)	[clientToCrs!PAYMENT_SEAT,seatNumber,clientId]
		queue 1 (clientToCrs): [PAYMENT_SEAT,0,3]

 87:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 88:	proc  2 (crs:1) Pessimistic.pml:79 (state 20)	[(((receivedSeat<3)&&(seats[receivedSeat].seatStatus!=EMPTY)))]

 89:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 90:	proc  2 (crs:1) Pessimistic.pml:81 (state -)	[values: 4!NOT_AVAILABLE_SEAT,0,2]
 90:	proc  2 (crs:1) Pessimistic.pml:81 (state 21)	[crsToClient[receivedCustomerId]!NOT_AVAILABLE_SEAT,receivedSeat,receivedCustomerId]
		queue 4 (crsToClient[2]): [NOT_AVAILABLE_SEAT,0,2]

 91:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 92:	proc  2 (crs:1) Pessimistic.pml:82 (state 22)	[notAvailableSeatCount = (notAvailableSeatCount+1)]
		crs(2):notAvailableSeatCount = 1

 93:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 94:	proc  5 (client:1) Pessimistic.pml:114 (state -)	[values: 4?NOT_AVAILABLE_SEAT,0,2]
 94:	proc  5 (client:1) Pessimistic.pml:114 (state 6)	[crsToClient[clientId]?NOT_AVAILABLE_SEAT,seatNumber,clientId]
		queue 4 (crsToClient[2]): 
		client(5):seatNumber = 0
		client(5):clientId = 2

 95:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 96:	proc  5 (client:1) Pessimistic.pml:116 (state 7)	[seatNumber = (seatNumber+1)]
		client(5):seatNumber = 1

 97:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

 98:	proc  2 (crs:1) Pessimistic.pml:67 (state -)	[values: 1?PAYMENT_SEAT,0,3]
 98:	proc  2 (crs:1) Pessimistic.pml:67 (state 12)	[clientToCrs?message,receivedSeat,receivedCustomerId]
		queue 1 (clientToCrs): 
		crs(2):message = PAYMENT_SEAT
		crs(2):receivedSeat = 0
		crs(2):receivedCustomerId = 3

 99:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

*******assigned seat 0, received seat 0, received client 3
100:	proc  2 (crs:1) Pessimistic.pml:68 (state 13)	[printf('*******assigned seat %d, received seat %d, received client %d\\n',assignedSeats,receivedSeat,receivedCustomerId)]

101:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

102:	proc  2 (crs:1) Pessimistic.pml:87 (state 28)	[((message==PAYMENT_SEAT))]

103:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

104:	proc  5 (client:1) Pessimistic.pml:107 (state -)	[values: 1!GET_SEAT,1,2]
104:	proc  5 (client:1) Pessimistic.pml:107 (state 1)	[clientToCrs!GET_SEAT,seatNumber,clientId]
		queue 1 (clientToCrs): [GET_SEAT,1,2]

105:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

106:	proc  2 (crs:1) Pessimistic.pml:89 (state 29)	[((receivedCustomerId==seats[receivedSeat].customerId))]

107:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

108:	proc  2 (crs:1) Pessimistic.pml:91 (state 30)	[seats[receivedSeat].seatStatus = ASSIGNED]

109:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

110:	proc  2 (crs:1) Pessimistic.pml:92 (state -)	[values: 5!SUCCESS_SEAT,0,3]
110:	proc  2 (crs:1) Pessimistic.pml:92 (state 31)	[crsToClient[receivedCustomerId]!SUCCESS_SEAT,receivedSeat,receivedCustomerId]
		queue 5 (crsToClient[3]): [SUCCESS_SEAT,0,3]

111:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

112:	proc  2 (crs:1) Pessimistic.pml:93 (state 32)	[assignedSeats = (assignedSeats+1)]
		crs(2):assignedSeats = 1

113:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

114:	proc  6 (client:1) Pessimistic.pml:112 (state -)	[values: 5?SUCCESS_SEAT,0,3]
114:	proc  6 (client:1) Pessimistic.pml:112 (state 4)	[crsToClient[clientId]?SUCCESS_SEAT,seatNumber,clientId]
		queue 5 (crsToClient[3]): 
		client(6):seatNumber = 0
		client(6):clientId = 3

115:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

116: proc 6 terminates
117:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

118:	proc  2 (crs:1) Pessimistic.pml:67 (state -)	[values: 1?GET_SEAT,1,2]
118:	proc  2 (crs:1) Pessimistic.pml:67 (state 12)	[clientToCrs?message,receivedSeat,receivedCustomerId]
		queue 1 (clientToCrs): 
		crs(2):message = GET_SEAT
		crs(2):receivedSeat = 1
		crs(2):receivedCustomerId = 2

119:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

*******assigned seat 1, received seat 1, received client 2
120:	proc  2 (crs:1) Pessimistic.pml:68 (state 13)	[printf('*******assigned seat %d, received seat %d, received client %d\\n',assignedSeats,receivedSeat,receivedCustomerId)]

121:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

122:	proc  2 (crs:1) Pessimistic.pml:70 (state 14)	[((message==GET_SEAT))]

123:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

124:	proc  4 (client:1) Pessimistic.pml:107 (state -)	[values: 1!GET_SEAT,0,1]
124:	proc  4 (client:1) Pessimistic.pml:107 (state 1)	[clientToCrs!GET_SEAT,seatNumber,clientId]
		queue 1 (clientToCrs): [GET_SEAT,0,1]

125:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

126:	proc  2 (crs:1) Pessimistic.pml:73 (state 19)	[(((receivedSeat<3)&&(seats[receivedSeat].seatStatus==EMPTY)))]

126:	proc  2 (crs:1) Pessimistic.pml:74 (state 16)	[seats[receivedSeat].seatStatus = RESERVED]

126:	proc  2 (crs:1) Pessimistic.pml:75 (state 17)	[seats[receivedSeat].customerId = receivedCustomerId]

126:	proc  2 (crs:1) Pessimistic.pml:77 (state -)	[values: 4!RETURNING_SEAT,1,2]
126:	proc  2 (crs:1) Pessimistic.pml:77 (state 18)	[crsToClient[receivedCustomerId]!RETURNING_SEAT,receivedSeat,receivedCustomerId]
		queue 4 (crsToClient[2]): [RETURNING_SEAT,1,2]

127:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

128:	proc  5 (client:1) Pessimistic.pml:109 (state -)	[values: 4?RETURNING_SEAT,1,2]
128:	proc  5 (client:1) Pessimistic.pml:109 (state 2)	[crsToClient[clientId]?RETURNING_SEAT,seatNumber,clientId]
		queue 4 (crsToClient[2]): 
		client(5):seatNumber = 1
		client(5):clientId = 2

129:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

130:	proc  2 (crs:1) Pessimistic.pml:67 (state -)	[values: 1?GET_SEAT,0,1]
130:	proc  2 (crs:1) Pessimistic.pml:67 (state 12)	[clientToCrs?message,receivedSeat,receivedCustomerId]
		queue 1 (clientToCrs): 
		crs(2):message = GET_SEAT
		crs(2):receivedSeat = 0
		crs(2):receivedCustomerId = 1

131:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

*******assigned seat 1, received seat 0, received client 1
132:	proc  2 (crs:1) Pessimistic.pml:68 (state 13)	[printf('*******assigned seat %d, received seat %d, received client %d\\n',assignedSeats,receivedSeat,receivedCustomerId)]

133:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

134:	proc  2 (crs:1) Pessimistic.pml:70 (state 14)	[((message==GET_SEAT))]

135:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

136:	proc  5 (client:1) Pessimistic.pml:111 (state -)	[values: 1!PAYMENT_SEAT,1,2]
136:	proc  5 (client:1) Pessimistic.pml:111 (state 3)	[clientToCrs!PAYMENT_SEAT,seatNumber,clientId]
		queue 1 (clientToCrs): [PAYMENT_SEAT,1,2]

137:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

138:	proc  2 (crs:1) Pessimistic.pml:79 (state 20)	[(((receivedSeat<3)&&(seats[receivedSeat].seatStatus!=EMPTY)))]

139:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

140:	proc  2 (crs:1) Pessimistic.pml:81 (state -)	[values: 3!NOT_AVAILABLE_SEAT,0,1]
140:	proc  2 (crs:1) Pessimistic.pml:81 (state 21)	[crsToClient[receivedCustomerId]!NOT_AVAILABLE_SEAT,receivedSeat,receivedCustomerId]
		queue 3 (crsToClient[1]): [NOT_AVAILABLE_SEAT,0,1]

141:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

142:	proc  2 (crs:1) Pessimistic.pml:82 (state 22)	[notAvailableSeatCount = (notAvailableSeatCount+1)]
		crs(2):notAvailableSeatCount = 2

143:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

144:	proc  4 (client:1) Pessimistic.pml:114 (state -)	[values: 3?NOT_AVAILABLE_SEAT,0,1]
144:	proc  4 (client:1) Pessimistic.pml:114 (state 6)	[crsToClient[clientId]?NOT_AVAILABLE_SEAT,seatNumber,clientId]
		queue 3 (crsToClient[1]): 
		client(4):seatNumber = 0
		client(4):clientId = 1

145:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

146:	proc  4 (client:1) Pessimistic.pml:116 (state 7)	[seatNumber = (seatNumber+1)]
		client(4):seatNumber = 1

147:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

148:	proc  2 (crs:1) Pessimistic.pml:67 (state -)	[values: 1?PAYMENT_SEAT,1,2]
148:	proc  2 (crs:1) Pessimistic.pml:67 (state 12)	[clientToCrs?message,receivedSeat,receivedCustomerId]
		queue 1 (clientToCrs): 
		crs(2):message = PAYMENT_SEAT
		crs(2):receivedSeat = 1
		crs(2):receivedCustomerId = 2

149:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

*******assigned seat 1, received seat 1, received client 2
150:	proc  2 (crs:1) Pessimistic.pml:68 (state 13)	[printf('*******assigned seat %d, received seat %d, received client %d\\n',assignedSeats,receivedSeat,receivedCustomerId)]

151:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

152:	proc  2 (crs:1) Pessimistic.pml:87 (state 28)	[((message==PAYMENT_SEAT))]

153:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

154:	proc  4 (client:1) Pessimistic.pml:107 (state -)	[values: 1!GET_SEAT,1,1]
154:	proc  4 (client:1) Pessimistic.pml:107 (state 1)	[clientToCrs!GET_SEAT,seatNumber,clientId]
		queue 1 (clientToCrs): [GET_SEAT,1,1]

155:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

156:	proc  2 (crs:1) Pessimistic.pml:89 (state 29)	[((receivedCustomerId==seats[receivedSeat].customerId))]

157:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

158:	proc  2 (crs:1) Pessimistic.pml:91 (state 30)	[seats[receivedSeat].seatStatus = ASSIGNED]

159:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

160:	proc  2 (crs:1) Pessimistic.pml:92 (state -)	[values: 4!SUCCESS_SEAT,1,2]
160:	proc  2 (crs:1) Pessimistic.pml:92 (state 31)	[crsToClient[receivedCustomerId]!SUCCESS_SEAT,receivedSeat,receivedCustomerId]
		queue 4 (crsToClient[2]): [SUCCESS_SEAT,1,2]

161:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

162:	proc  2 (crs:1) Pessimistic.pml:93 (state 32)	[assignedSeats = (assignedSeats+1)]
		crs(2):assignedSeats = 2

163:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

164:	proc  5 (client:1) Pessimistic.pml:112 (state -)	[values: 4?SUCCESS_SEAT,1,2]
164:	proc  5 (client:1) Pessimistic.pml:112 (state 4)	[crsToClient[clientId]?SUCCESS_SEAT,seatNumber,clientId]
		queue 4 (crsToClient[2]): 
		client(5):seatNumber = 1
		client(5):clientId = 2

165:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

166: proc 5 terminates
167:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

168:	proc  2 (crs:1) Pessimistic.pml:67 (state -)	[values: 1?GET_SEAT,1,1]
168:	proc  2 (crs:1) Pessimistic.pml:67 (state 12)	[clientToCrs?message,receivedSeat,receivedCustomerId]
		queue 1 (clientToCrs): 
		crs(2):message = GET_SEAT
		crs(2):receivedSeat = 1
		crs(2):receivedCustomerId = 1

169:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

*******assigned seat 2, received seat 1, received client 1
170:	proc  2 (crs:1) Pessimistic.pml:68 (state 13)	[printf('*******assigned seat %d, received seat %d, received client %d\\n',assignedSeats,receivedSeat,receivedCustomerId)]

171:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

172:	proc  2 (crs:1) Pessimistic.pml:70 (state 14)	[((message==GET_SEAT))]

173:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

174:	proc  3 (client:1) Pessimistic.pml:107 (state -)	[values: 1!GET_SEAT,0,0]
174:	proc  3 (client:1) Pessimistic.pml:107 (state 1)	[clientToCrs!GET_SEAT,seatNumber,clientId]
		queue 1 (clientToCrs): [GET_SEAT,0,0]

175:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

176:	proc  2 (crs:1) Pessimistic.pml:79 (state 20)	[(((receivedSeat<3)&&(seats[receivedSeat].seatStatus!=EMPTY)))]

177:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

178:	proc  2 (crs:1) Pessimistic.pml:81 (state -)	[values: 3!NOT_AVAILABLE_SEAT,1,1]
178:	proc  2 (crs:1) Pessimistic.pml:81 (state 21)	[crsToClient[receivedCustomerId]!NOT_AVAILABLE_SEAT,receivedSeat,receivedCustomerId]
		queue 3 (crsToClient[1]): [NOT_AVAILABLE_SEAT,1,1]

179:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

180:	proc  2 (crs:1) Pessimistic.pml:82 (state 22)	[notAvailableSeatCount = (notAvailableSeatCount+1)]
		crs(2):notAvailableSeatCount = 3

181:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

182:	proc  4 (client:1) Pessimistic.pml:114 (state -)	[values: 3?NOT_AVAILABLE_SEAT,1,1]
182:	proc  4 (client:1) Pessimistic.pml:114 (state 6)	[crsToClient[clientId]?NOT_AVAILABLE_SEAT,seatNumber,clientId]
		queue 3 (crsToClient[1]): 
		client(4):seatNumber = 1
		client(4):clientId = 1

183:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

184:	proc  4 (client:1) Pessimistic.pml:116 (state 7)	[seatNumber = (seatNumber+1)]
		client(4):seatNumber = 2

185:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

186:	proc  2 (crs:1) Pessimistic.pml:67 (state -)	[values: 1?GET_SEAT,0,0]
186:	proc  2 (crs:1) Pessimistic.pml:67 (state 12)	[clientToCrs?message,receivedSeat,receivedCustomerId]
		queue 1 (clientToCrs): 
		crs(2):message = GET_SEAT
		crs(2):receivedSeat = 0
		crs(2):receivedCustomerId = 0

187:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

*******assigned seat 2, received seat 0, received client 0
188:	proc  2 (crs:1) Pessimistic.pml:68 (state 13)	[printf('*******assigned seat %d, received seat %d, received client %d\\n',assignedSeats,receivedSeat,receivedCustomerId)]

189:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

190:	proc  2 (crs:1) Pessimistic.pml:70 (state 14)	[((message==GET_SEAT))]

191:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

192:	proc  4 (client:1) Pessimistic.pml:107 (state -)	[values: 1!GET_SEAT,2,1]
192:	proc  4 (client:1) Pessimistic.pml:107 (state 1)	[clientToCrs!GET_SEAT,seatNumber,clientId]
		queue 1 (clientToCrs): [GET_SEAT,2,1]

193:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

194:	proc  2 (crs:1) Pessimistic.pml:79 (state 20)	[(((receivedSeat<3)&&(seats[receivedSeat].seatStatus!=EMPTY)))]

195:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

196:	proc  2 (crs:1) Pessimistic.pml:81 (state -)	[values: 2!NOT_AVAILABLE_SEAT,0,0]
196:	proc  2 (crs:1) Pessimistic.pml:81 (state 21)	[crsToClient[receivedCustomerId]!NOT_AVAILABLE_SEAT,receivedSeat,receivedCustomerId]
		queue 2 (crsToClient[0]): [NOT_AVAILABLE_SEAT,0,0]

197:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

198:	proc  2 (crs:1) Pessimistic.pml:82 (state 22)	[notAvailableSeatCount = (notAvailableSeatCount+1)]
		crs(2):notAvailableSeatCount = 4

199:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

200:	proc  3 (client:1) Pessimistic.pml:114 (state -)	[values: 2?NOT_AVAILABLE_SEAT,0,0]
200:	proc  3 (client:1) Pessimistic.pml:114 (state 6)	[crsToClient[clientId]?NOT_AVAILABLE_SEAT,seatNumber,clientId]
		queue 2 (crsToClient[0]): 
		client(3):seatNumber = 0
		client(3):clientId = 0

201:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

202:	proc  3 (client:1) Pessimistic.pml:116 (state 7)	[seatNumber = (seatNumber+1)]
		client(3):seatNumber = 1

203:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

204:	proc  2 (crs:1) Pessimistic.pml:67 (state -)	[values: 1?GET_SEAT,2,1]
204:	proc  2 (crs:1) Pessimistic.pml:67 (state 12)	[clientToCrs?message,receivedSeat,receivedCustomerId]
		queue 1 (clientToCrs): 
		crs(2):message = GET_SEAT
		crs(2):receivedSeat = 2
		crs(2):receivedCustomerId = 1

205:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

*******assigned seat 2, received seat 2, received client 1
206:	proc  2 (crs:1) Pessimistic.pml:68 (state 13)	[printf('*******assigned seat %d, received seat %d, received client %d\\n',assignedSeats,receivedSeat,receivedCustomerId)]

207:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

208:	proc  2 (crs:1) Pessimistic.pml:70 (state 14)	[((message==GET_SEAT))]

209:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

210:	proc  2 (crs:1) Pessimistic.pml:73 (state 19)	[(((receivedSeat<3)&&(seats[receivedSeat].seatStatus==EMPTY)))]

210:	proc  2 (crs:1) Pessimistic.pml:74 (state 16)	[seats[receivedSeat].seatStatus = RESERVED]

210:	proc  2 (crs:1) Pessimistic.pml:75 (state 17)	[seats[receivedSeat].customerId = receivedCustomerId]

210:	proc  2 (crs:1) Pessimistic.pml:77 (state -)	[values: 3!RETURNING_SEAT,2,1]
210:	proc  2 (crs:1) Pessimistic.pml:77 (state 18)	[crsToClient[receivedCustomerId]!RETURNING_SEAT,receivedSeat,receivedCustomerId]
		queue 3 (crsToClient[1]): [RETURNING_SEAT,2,1]

211:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

212:	proc  4 (client:1) Pessimistic.pml:109 (state -)	[values: 3?RETURNING_SEAT,2,1]
212:	proc  4 (client:1) Pessimistic.pml:109 (state 2)	[crsToClient[clientId]?RETURNING_SEAT,seatNumber,clientId]
		queue 3 (crsToClient[1]): 
		client(4):seatNumber = 2
		client(4):clientId = 1

213:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

214:	proc  4 (client:1) Pessimistic.pml:111 (state -)	[values: 1!PAYMENT_SEAT,2,1]
214:	proc  4 (client:1) Pessimistic.pml:111 (state 3)	[clientToCrs!PAYMENT_SEAT,seatNumber,clientId]
		queue 1 (clientToCrs): [PAYMENT_SEAT,2,1]

215:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

216:	proc  2 (crs:1) Pessimistic.pml:67 (state -)	[values: 1?PAYMENT_SEAT,2,1]
216:	proc  2 (crs:1) Pessimistic.pml:67 (state 12)	[clientToCrs?message,receivedSeat,receivedCustomerId]
		queue 1 (clientToCrs): 
		crs(2):message = PAYMENT_SEAT
		crs(2):receivedSeat = 2
		crs(2):receivedCustomerId = 1

217:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

*******assigned seat 2, received seat 2, received client 1
218:	proc  2 (crs:1) Pessimistic.pml:68 (state 13)	[printf('*******assigned seat %d, received seat %d, received client %d\\n',assignedSeats,receivedSeat,receivedCustomerId)]

219:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

220:	proc  2 (crs:1) Pessimistic.pml:87 (state 28)	[((message==PAYMENT_SEAT))]

221:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

222:	proc  2 (crs:1) Pessimistic.pml:89 (state 29)	[((receivedCustomerId==seats[receivedSeat].customerId))]

223:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

224:	proc  2 (crs:1) Pessimistic.pml:91 (state 30)	[seats[receivedSeat].seatStatus = ASSIGNED]

225:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

226:	proc  2 (crs:1) Pessimistic.pml:92 (state -)	[values: 3!SUCCESS_SEAT,2,1]
226:	proc  2 (crs:1) Pessimistic.pml:92 (state 31)	[crsToClient[receivedCustomerId]!SUCCESS_SEAT,receivedSeat,receivedCustomerId]
		queue 3 (crsToClient[1]): [SUCCESS_SEAT,2,1]

227:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

228:	proc  2 (crs:1) Pessimistic.pml:93 (state 32)	[assignedSeats = (assignedSeats+1)]
		crs(2):assignedSeats = 3

229:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

230:	proc  4 (client:1) Pessimistic.pml:112 (state -)	[values: 3?SUCCESS_SEAT,2,1]
230:	proc  4 (client:1) Pessimistic.pml:112 (state 4)	[crsToClient[clientId]?SUCCESS_SEAT,seatNumber,clientId]
		queue 3 (crsToClient[1]): 
		client(4):seatNumber = 2
		client(4):clientId = 1

231:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

232: proc 4 terminates
233:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

234:	proc  0 (hacker:1) Pessimistic.pml:127 (state -)	[values: 1!PAYMENT_SEAT,0,4]
234:	proc  0 (hacker:1) Pessimistic.pml:127 (state 1)	[clientToCrs!PAYMENT_SEAT,0,4]
		queue 1 (clientToCrs): [PAYMENT_SEAT,0,4]

235:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

236:	proc  2 (crs:1) Pessimistic.pml:67 (state -)	[values: 1?PAYMENT_SEAT,0,4]
236:	proc  2 (crs:1) Pessimistic.pml:67 (state 12)	[clientToCrs?message,receivedSeat,receivedCustomerId]
		queue 1 (clientToCrs): 
		crs(2):message = PAYMENT_SEAT
		crs(2):receivedSeat = 0
		crs(2):receivedCustomerId = 4

<<<<<START OF CYCLE>>>>>
237:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

*******assigned seat 3, received seat 0, received client 4
238:	proc  2 (crs:1) Pessimistic.pml:68 (state 13)	[printf('*******assigned seat %d, received seat %d, received client %d\\n',assignedSeats,receivedSeat,receivedCustomerId)]

239:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

240:	proc  2 (crs:1) Pessimistic.pml:87 (state 28)	[((message==PAYMENT_SEAT))]

241:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

242:	proc  2 (crs:1) Pessimistic.pml:94 (state 33)	[((receivedCustomerId!=seats[receivedSeat].customerId))]

243:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

244:	proc  2 (crs:1) Pessimistic.pml:94 (state -)	[values: 6!INVALID_CUSTOMER,0,4]
244:	proc  2 (crs:1) Pessimistic.pml:94 (state 34)	[crsToClient[receivedCustomerId]!INVALID_CUSTOMER,receivedSeat,receivedCustomerId]
		queue 6 (crsToClient[4]): [INVALID_CUSTOMER,0,4]

245:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

246:	proc  0 (hacker:1) Pessimistic.pml:127 (state -)	[values: 6?INVALID_CUSTOMER,0,4]
246:	proc  0 (hacker:1) Pessimistic.pml:127 (state 2)	[crsToClient[4]?INVALID_CUSTOMER,0,4]
		queue 6 (crsToClient[4]): 

247:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

248:	proc  0 (hacker:1) Pessimistic.pml:127 (state -)	[values: 1!PAYMENT_SEAT,0,4]
248:	proc  0 (hacker:1) Pessimistic.pml:127 (state 1)	[clientToCrs!PAYMENT_SEAT,0,4]
		queue 1 (clientToCrs): [PAYMENT_SEAT,0,4]

249:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:26 (state 1)	[(!((crs.notAvailableSeatCount==(((3*(3+1))/2)-1))))]

250:	proc  2 (crs:1) Pessimistic.pml:67 (state -)	[values: 1?PAYMENT_SEAT,0,4]
250:	proc  2 (crs:1) Pessimistic.pml:67 (state 12)	[clientToCrs?message,receivedSeat,receivedCustomerId]
		queue 1 (clientToCrs): 
		crs(2):message = PAYMENT_SEAT
		crs(2):receivedSeat = 0
		crs(2):receivedCustomerId = 4

spin: trail ends after 250 steps
#processes: 4
		seats[0].seatStatus = ASSIGNED
		seats[0].customerId = 3
		seats[1].seatStatus = ASSIGNED
		seats[1].customerId = 2
		seats[2].seatStatus = ASSIGNED
		seats[2].customerId = 1
		queue 1 (clientToCrs): 
		queue 2 (crsToClient[0]): 
		queue 3 (crsToClient[1]): 
		queue 4 (crsToClient[2]): 
		queue 5 (crsToClient[3]): 
		queue 6 (crsToClient[4]): 
250:	proc  3 (client:1) Pessimistic.pml:106 (state 12)
		client(3):seatNumber = 1
		client(3):clientId = 0
250:	proc  2 (crs:1) Pessimistic.pml:68 (state 13)
		crs(2):i = 3
		crs(2):message = PAYMENT_SEAT
		crs(2):receivedSeat = 0
		crs(2):receivedCustomerId = 4
		crs(2):assignedSeats = 3
		crs(2):flightFullMessageCount = 0
		crs(2):notAvailableSeatCount = 4
250:	proc  1 (:init::1) Pessimistic.pml:137 (state 7)
		:init:(1):idClient = 4
250:	proc  0 (hacker:1) Pessimistic.pml:127 (state 2)
MSC: ~G line 25
250:	proc  - (notAvailableCountEqualsToNthTriangleNumber:1) _spin_nvr.tmp:25 (state 3)
7 processes created
Exit-Status 0
