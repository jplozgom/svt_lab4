spin: Pessimistic.pml:89, redundant skip
  0:	proc  - (:root:) creates proc  0 (:init:)
ltl allSeatsAlwaysAssigned: [] (<> ((crs:assignedSeats==3)))
ltl ifMoreClientsThanSeatsFlightFullCounterGreaterThanZero: [] ((! ((4>3))) || (<> ((crs:flightFullMessageCount==(4-3)))))
spin: Pessimistic.pml:0, warning, proctype crs, 'int   flightFullMessageCount' variable is never used (other than in print stmnts)
spin: Pessimistic.pml:0, warning, proctype crs, 'int   assignedSeats' variable is never used (other than in print stmnts)
Starting crs with pid 1
  1:	proc  0 (:init::1) creates proc  1 (crs)
  1:	proc  0 (:init::1) Pessimistic.pml:123 (state 1)	[(run crs())]

  2:	proc  0 (:init::1) Pessimistic.pml:130 (state 8)	[.(goto)]

  3:	proc  0 (:init::1) Pessimistic.pml:125 (state 2)	[((idClient<4))]

Starting client with pid 2
  4:	proc  0 (:init::1) creates proc  2 (client)
  4:	proc  0 (:init::1) Pessimistic.pml:126 (state 3)	[(run client(idClient))]

  5:	proc  2 (client:1) Pessimistic.pml:99 (state -)	[values: 1!GET_SEAT,0,0]
  5:	proc  2 (client:1) Pessimistic.pml:99 (state 1)	[clientToCrs!GET_SEAT,seatNumber,clientId]
		queue 1 (clientToCrs): [GET_SEAT,0,0]

  6:	proc  0 (:init::1) Pessimistic.pml:127 (state 4)	[idClient = (idClient+1)]
		:init:(0):idClient = 1

  7:	proc  1 (crs:1) Pessimistic.pml:54 (state 1)	[((i<3))]
		queue 2 (crsToClient[0]): 
		queue 3 (crsToClient[1]): 
		queue 4 (crsToClient[2]): 
		queue 5 (crsToClient[3]): 

  8:	proc  0 (:init::1) Pessimistic.pml:130 (state 8)	[.(goto)]

  9:	proc  1 (crs:1) Pessimistic.pml:55 (state 2)	[seats[i].seatStatus = EMPTY]
		queue 2 (crsToClient[0]): 

 10:	proc  0 (:init::1) Pessimistic.pml:125 (state 2)	[((idClient<4))]

 11:	proc  1 (crs:1) Pessimistic.pml:56 (state 3)	[seats[i].customerId = -(1)]

status 3 12:	proc  1 (crs:1) Pessimistic.pml:57 (state 4)	[printf('status %d',seats[i].seatStatus)]

Starting client with pid 3
 13:	proc  0 (:init::1) creates proc  3 (client)
 13:	proc  0 (:init::1) Pessimistic.pml:126 (state 3)	[(run client(idClient))]

 14:	proc  0 (:init::1) Pessimistic.pml:127 (state 4)	[idClient = (idClient+1)]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		queue 2 (crsToClient[0]): 
		:init:(0):idClient = 2

customerId -1 15:	proc  1 (crs:1) Pessimistic.pml:58 (state 5)	[printf('customerId %d',seats[i].customerId)]
		queue 1 (clientToCrs): [GET_SEAT,0,0]

 16:	proc  0 (:init::1) Pessimistic.pml:130 (state 8)	[.(goto)]
		queue 2 (crsToClient[0]): 

 17:	proc  0 (:init::1) Pessimistic.pml:125 (state 2)	[((idClient<4))]

Starting client with pid 4
 18:	proc  0 (:init::1) creates proc  4 (client)
 18:	proc  0 (:init::1) Pessimistic.pml:126 (state 3)	[(run client(idClient))]

 19:	proc  1 (crs:1) Pessimistic.pml:59 (state 6)	[i = (i+1)]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		crs(1):i = 1

 20:	proc  1 (crs:1) Pessimistic.pml:63 (state 10)	[.(goto)]

 21:	proc  0 (:init::1) Pessimistic.pml:127 (state 4)	[idClient = (idClient+1)]
		:init:(0):idClient = 3

 22:	proc  0 (:init::1) Pessimistic.pml:130 (state 8)	[.(goto)]
		queue 1 (clientToCrs): [GET_SEAT,0,0]

 23:	proc  0 (:init::1) Pessimistic.pml:125 (state 2)	[((idClient<4))]

Starting client with pid 5
 24:	proc  0 (:init::1) creates proc  5 (client)
 24:	proc  0 (:init::1) Pessimistic.pml:126 (state 3)	[(run client(idClient))]
		queue 1 (clientToCrs): [GET_SEAT,0,0]

 25:	proc  1 (crs:1) Pessimistic.pml:54 (state 1)	[((i<3))]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		queue 2 (crsToClient[0]): 

 26:	proc  1 (crs:1) Pessimistic.pml:55 (state 2)	[seats[i].seatStatus = EMPTY]
		queue 1 (clientToCrs): [GET_SEAT,0,0]

 27:	proc  0 (:init::1) Pessimistic.pml:127 (state 4)	[idClient = (idClient+1)]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		queue 2 (crsToClient[0]): 
		:init:(0):idClient = 4

 28:	proc  0 (:init::1) Pessimistic.pml:130 (state 8)	[.(goto)]

 29:	proc  1 (crs:1) Pessimistic.pml:56 (state 3)	[seats[i].customerId = -(1)]

 30:	proc  0 (:init::1) Pessimistic.pml:128 (state 5)	[((idClient==4))]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		queue 2 (crsToClient[0]): 

status 3 31:	proc  1 (crs:1) Pessimistic.pml:57 (state 4)	[printf('status %d',seats[i].seatStatus)]

 32:	proc  0 (:init::1) Pessimistic.pml:128 (state 6)	[goto :b3]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		queue 2 (crsToClient[0]): 

customerId -1 33:	proc  1 (crs:1) Pessimistic.pml:58 (state 5)	[printf('customerId %d',seats[i].customerId)]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		queue 2 (crsToClient[0]): 

 34:	proc  1 (crs:1) Pessimistic.pml:59 (state 6)	[i = (i+1)]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		crs(1):i = 2

 35:	proc  1 (crs:1) Pessimistic.pml:63 (state 10)	[.(goto)]

 36:	proc  1 (crs:1) Pessimistic.pml:54 (state 1)	[((i<3))]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		queue 2 (crsToClient[0]): 

 37:	proc  1 (crs:1) Pessimistic.pml:55 (state 2)	[seats[i].seatStatus = EMPTY]
		queue 1 (clientToCrs): [GET_SEAT,0,0]

 38:	proc  1 (crs:1) Pessimistic.pml:56 (state 3)	[seats[i].customerId = -(1)]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		queue 2 (crsToClient[0]): 

status 3 39:	proc  1 (crs:1) Pessimistic.pml:57 (state 4)	[printf('status %d',seats[i].seatStatus)]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		queue 2 (crsToClient[0]): 

customerId -1 40:	proc  1 (crs:1) Pessimistic.pml:58 (state 5)	[printf('customerId %d',seats[i].customerId)]

 41:	proc  1 (crs:1) Pessimistic.pml:59 (state 6)	[i = (i+1)]
		crs(1):i = 3

 42:	proc  1 (crs:1) Pessimistic.pml:63 (state 10)	[.(goto)]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		queue 2 (crsToClient[0]): 

 43:	proc  1 (crs:1) Pessimistic.pml:60 (state 7)	[((i>=3))]
		queue 1 (clientToCrs): [GET_SEAT,0,0]
		queue 2 (crsToClient[0]): 

 44:	proc  1 (crs:1) Pessimistic.pml:60 (state 8)	[goto :b0]

 45:	proc  1 (crs:1) Pessimistic.pml:64 (state -)	[values: 1?GET_SEAT,0,0]
 45:	proc  1 (crs:1) Pessimistic.pml:64 (state 12)	[clientToCrs?message,receivedSeat,receivedClientId]
		queue 1 (clientToCrs): 
		crs(1):message = GET_SEAT
		crs(1):receivedSeat = 0
